{
    "contents" : "################################################\n###\n###  scrubbing and aggregating HFREQ data\n###\n################################################\n\n\n###########\n# functions\n\n\n### recursively \"rbind\" a list xts time series - same as do.call.rbind\ndo_call_rbind <- function(list_var) {\n  # call lapply in a loop to divide list_var by half, binding neighboring elements\n  while (length(list_var) > 1) {\n    # index of odd list elements\n    odd_index <- seq(from=1, to=length(list_var), by=2)\n    # bind neighboring elements and divide list_var by half\n    list_var <- lapply(odd_index, function(in_dex) {\n      if (in_dex==length(list_var)) {\n        return(list_var[[in_dex]])\n      }\n      return(rbind(list_var[[in_dex]], list_var[[in_dex+1]]))\n    })  # end lapply\n  }  # end while\n  # list_var has only one element - return it\n  list_var[[1]]\n}  # end do_call_rbind\n\n\n### identify suspect bid_offer values in univariate xts time series\nsuspect_bid_offer <- function(bid_offer, agg_vol_window=51, suspect_threshold=2) {\n\n  # calculate vo_lat as running quantile\n  vo_lat <- runquantile(x=abs(as.vector(bid_offer)), k=agg_vol_window, probs=0.9, endrule=\"constant\", align=\"center\")\n  vo_lat <- xts(vo_lat, order.by=index(bid_offer))\n  colnames(vo_lat) <- \"volat\"\n  # carry forward non-zero vo_lat values\n  vo_lat[vo_lat==0] <- NA\n  vo_lat[1] <- 1\n  vo_lat <- na.locf(vo_lat)\n  #  vo_lat <- na.locf(vo_lat, fromLast=TRUE)\n  \n  # find suspect values\n  # suspect if bid_offer greater than vo_lat\n  sus_pect <- (abs(bid_offer) > 2*suspect_threshold*vo_lat)\n  sus_pect[1] <- FALSE\n  \n  cat(\"date:\", format(as.Date(index(first(bid_offer)))), \"\\tscrubbed\", sum(sus_pect), \"suspect bid-offer values\\n\")\n  sus_pect\n}  # end suspect_bid_offer\n\n\n\n### identify suspect jump values in univariate xts price time series\nsuspect_jump <- function(price_data, agg_vol_window=51, suspect_threshold=2) {\n\n  # calculate simple returns\n  diff_prices <- diff(price_data)\n  diff_prices[1, ] <- 0\n  colnames(diff_prices) <- \"diffs\"\n  diff_prices_fut <- lag(diff_prices, -1)\n  diff_prices_fut[nrow(diff_prices_fut)] <- 0\n  colnames(diff_prices_fut) <- \"diff_prices_fut\"\n  \n  # calculate vo_lat as running quantile\n  vo_lat <- runquantile(x=abs(as.vector(diff_prices)), k=agg_vol_window, probs=0.9, endrule=\"constant\", align=\"center\")\n  vo_lat <- xts(vo_lat, order.by=index(diff_prices))\n  colnames(vo_lat) <- \"volat\"\n  # carry forward non-zero vo_lat values\n  vo_lat[vo_lat==0] <- NA\n  vo_lat[1] <- 1\n  vo_lat <- na.locf(vo_lat)\n  #  vo_lat <- na.locf(vo_lat, fromLast=TRUE)\n  \n  # find suspect values\n  # suspect if abs diffs greater than vo_lat, and if abs sum of diffs less than vo_lat\n  sus_pect <- (\n    (abs(diff_prices) > suspect_threshold*vo_lat) & \n      (abs(diff_prices_fut) > suspect_threshold*vo_lat) & \n      (abs(diff_prices+diff_prices_fut) < 2*suspect_threshold*vo_lat)\n  )\n  sus_pect[1] <- FALSE\n  colnames(sus_pect) <- \"suspect\"\n  # cat(\"Parsing\", deparse(substitute(taq_data)), \"\\n\")\n  # cat(\"Parsing\", strsplit(deparse(substitute(taq_data)), split=\"[.]\")[[1]][4], \"on date:\", format(to_day), \"\\tscrubbed\", sum(sus_pect), \"suspect values\\n\")\n  cat(\"date:\", format(as.Date(index(first(price_data)))), \"\\tscrubbed\", sum(sus_pect), \"suspect jump values\\n\")\n  sus_pect\n}  # end suspect_jump\n\n\n\n### scrub and aggregate a single day of TAQ data in xts format\n# return mid price and volume\nscrub_agg <- function(taq_data, agg_vol_window=51, suspect_threshold=2) {\n\n  # convert time index to New_York\n  index(taq_data) <- with_tz(index(taq_data), \"America/New_York\")\n  # subset data to NYSE trading hours\n  taq_data <- taq_data['T09:30:00/T16:00:00', ]\n  # return NULL if no data\n  if (nrow(taq_data)==0)  return(NULL)\n  to_day <- as.Date(index(first(taq_data)))\n  \n  # remove duplicate time stamps using duplicated\n  taq_data <- taq_data[!duplicated(index(taq_data)), ]\n  \n  # scrub quotes with suspect bid-offer spreads\n  bid_offer <- taq_data[, 'Ask.Price'] - taq_data[, 'Bid.Price']\n  #  bid_offer <- na.omit(bid_offer)\n  sus_pect <- suspect_bid_offer(bid_offer)\n  # remove suspect values\n  taq_data <- taq_data[!sus_pect]\n  # replace suspect values\n  # taq_data[sus_pect, \"Bid.Price\"] <- taq_data[sus_pect, \"Trade.Price\"]\n  # taq_data[sus_pect, \"Ask.Price\"] <- taq_data[sus_pect, \"Trade.Price\"]\n  \n  # scrub quotes with suspect price jumps\n  # calculate mid prices\n  mid_prices <- 0.5 * (taq_data[, \"Bid.Price\"] + taq_data[, \"Ask.Price\"])\n  #  mid_prices <- na.omit(mid_prices)\n  colnames(mid_prices) <- \"Mid.Price\"\n  # replace suspect values with NA\n  mid_prices[suspect_jump(mid_prices)] <- NA\n  mid_prices <- na.locf(mid_prices)\n  #  mid_prices <- na.locf(mid_prices, fromLast=TRUE)\n  mid_prices <- cbind(mid_prices, taq_data[index(mid_prices), \"Volume\"])\n  mid_prices[is.na(mid_prices[, \"Volume\"]), \"Volume\"] <- 0\n  \n  # aggregate to OHLC minutes data and cumulative volume\n  mid_prices <- to.period(x=mid_prices, period=\"minutes\")\n  # round up times to next minute\n  index(mid_prices) <- align.time(x=index(mid_prices), 60)\n  mid_prices\n}  # end scrub_agg\n\n\n\n### scrub and return a single day of TAQ data\nscrub_TAQ <- function(taq_data, agg_vol_window=51, suspect_threshold=2) {\n\n  # convert time index to New_York\n  index(taq_data) <- with_tz(index(taq_data), \"America/New_York\")\n  # subset data to NYSE trading hours\n  taq_data <- taq_data['T09:30:00/T16:00:00', ]\n  # return NULL if no data\n  if (nrow(taq_data)==0)  return(NULL)\n  \n  # remove duplicate time stamps using duplicated\n  taq_data <- taq_data[!duplicated(index(taq_data)), ]\n  \n  # scrub quotes with suspect bid-offer spreads\n  bid_offer <- taq_data[, 'Ask.Price'] - taq_data[, 'Bid.Price']\n  #  bid_offer <- na.omit(bid_offer)\n  sus_pect <- suspect_bid_offer(bid_offer)\n  # remove suspect values\n  taq_data <- taq_data[!sus_pect]\n  # replace suspect values\n  # taq_data[sus_pect, \"Bid.Price\"] <- taq_data[sus_pect, \"Trade.Price\"]\n  # taq_data[sus_pect, \"Ask.Price\"] <- taq_data[sus_pect, \"Trade.Price\"]\n  \n  # scrub quotes with suspect price jumps\n  # calculate mid prices\n  mid_prices <- 0.5 * (taq_data[, \"Bid.Price\"] + taq_data[, \"Ask.Price\"])\n  #  mid_prices <- na.omit(mid_prices)\n  colnames(mid_prices) <- \"Mid.Price\"\n  # replace suspect values with NA\n  mid_prices[suspect_jump(mid_prices)] <- NA\n  mid_prices <- na.locf(mid_prices)\n  #  mid_prices <- na.locf(mid_prices, fromLast=TRUE)\n  mid_prices <- cbind(mid_prices, taq_data[index(mid_prices), \"Volume\"])\n  mid_prices[is.na(mid_prices[, \"Volume\"]), \"Volume\"] <- 0\n  \n  # aggregate to OHLC minutes data and cumulative volume\n  mid_prices <- to.period(x=mid_prices, period=\"minutes\")\n  # round up times to next minute\n  index(mid_prices) <- align.time(x=index(mid_prices), 60)\n  mid_prices\n}  # end scrub_TAQ\n\n\n\n###########\n# load and scrub multiple days of data for a single symbol\nload_data <- function(sym_bol) {\n  \n  # create path to directory with *.RData files\n  file_dir <- file.path(data_dir, sym_bol)\n  # get list of *.RData files\n  file_list <- list.files(file_dir)\n  # create paths to *.RData files\n  file_names <- file.path(file_dir, file_list)\n  \n  # load data into list\n  data <- sapply(file_names, function(file_name) {\n    cat(\"loading\", sym_bol, \"frome file: \", file_name, \"\\n\")\n    data_name <- load(file_name)\n    get(data_name)\n  })\n  \n  # scrub and aggregate the data\n  data <- sapply(data, scrub_agg)\n  \n  # recursively \"rbind\" the list into a single xts\n  data <- do_call_rbind(data)\n  \n  colnames(data) <- sapply(strsplit(colnames(data), split=\"[.]\"), \n                           function(strng) paste(sym_bol, strng[-1], sep=\".\"))\n  \n  assign(sym_bol, data)\n  \n  save(list=eval(sym_bol), file=paste0(sym_bol, \".RData\"))\n  \n}  # end load_data\n\n",
    "created" : 1423568746818.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1302170829",
    "id" : "AA782B30",
    "lastKnownWriteTime" : 1423871156,
    "path" : "C:/Develop/R/HighFreq/R/HighFreq.R",
    "project_path" : "R/HighFreq.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}