log_index <- log(in_dex/as.numeric(in_dex[1, ]))
pnl_s <- cbind(pnl_s, log_index, (pnl_s+log_index)/2)
col_names <- c("Strategy", "Index", "Average")
colnames(pnl_s) <- col_names
dygraphs::dygraph(pnl_s[end_points], main="Rolling Portfolio Optimization Strategy (log scale)") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="red", strokeWidth=1) %>%
dySeries(name=col_names[2], axis="y2", col="blue", strokeWidth=1) %>%
dySeries(name=col_names[3], axis="y2", col="green", strokeWidth=2)
head(log_index)
head(end_points)
log_index <- log(in_dex/as.numeric(in_dex[end_points[1], ]))
pnl_s <- foo
pnl_s <- cumsum(pnl_s)
log_index <- log(in_dex/as.numeric(in_dex[end_points[1], ]))
pnl_s <- cbind(pnl_s, log_index, (pnl_s+log_index)/2)
col_names <- c("Strategy", "Index", "Average")
colnames(pnl_s) <- col_names
dygraphs::dygraph(pnl_s[end_points], main="Rolling Portfolio Optimization Strategy (log scale)") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="red", strokeWidth=1) %>%
dySeries(name=col_names[2], axis="y2", col="blue", strokeWidth=1) %>%
dySeries(name=col_names[3], axis="y2", col="green", strokeWidth=2)
library(HighFreq)
ls()
library(shiny); runApp('C:/Develop/R/presentations/app_roll_portf4.R')
load("C:/Develop/R/lecture_slides/data/sp500_prices.RData")
max_eigen <- 5
inter_val <- "months"
look_back <- 12
end_points <- rutils::calc_endpoints(re_turns, inter_val=inter_val)
end_points <- end_points[end_points > (NCOL(re_turns)+1)]
len_gth <- NROW(end_points)
start_points <- c(rep_len(1, look_back-1), end_points[1:(len_gth-look_back+1)])
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen))
weight_s <- sort(weight_s)
head(weight_s)
foo <- weight_s
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen, typ_e="min_var"))
weight_s <- sort(weight_s)
head(weight_s)
# [1] -0.0030462978 -0.0016048197 -0.0015363754 -0.0013908133 -0.0009716613 -0.0009313848
sum(weight_s)
library(HighFreq)
ls()
rm(weight_s)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen, typ_e="min_var"))
head(weight_s)
weight_s <- sort(weight_s)
head(weight_s)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen, typ_e="blah"))
library(HighFreq)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen, typ_e="blah"))
weight_s
round(weight_s, 3)
library(HighFreq)
drop(HighFreq::calc_weights(re_turns, max_eigen, typ_e="blah"))
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
install.packages("roxygen2")
.libPaths()
getwd()
devtools::document()
devtools::document("C:/Develop/R/HighFreq")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
install.packages("commonmark")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
install.packages("xml2")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
install.packages("pkgload")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
install.packages("testthat")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
install.packages("processx")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
install.packages("ps")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
install.packages("caTools")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
devtools::document("C:/Develop/R/HighFreq")
install.packages("caTools")
devtools::document("C:/Develop/R/HighFreq")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
devtools::document("C:/Develop/R/HighFreq")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
install.packages("quantmod")
install.packages("quantmod")
roxygen2::roxygenise("C:/Develop/R/HighFreq")
library(HighFreq)
roxygen2::roxygenise("C:/Develop/R/HighFreq")
devtools::document("C:/Develop/R/HighFreq")
devtools::document("C:/Develop/R/HighFreq")
devtools::document("C:/Develop/R/HighFreq")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
library(HighFreq)
foo <- rutils::etf_env$re_turns[, 1]
head(foo)
foo <- na.omit(foo)
head(foo)
re_turns <- foo
re_turns <- rutils::etf_env$re_turns
re_turns <- na.omit(re_turns)
head(re_turns)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e == "max_pcomp"))
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="max_pcomp"))
library(HighFreq)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="max_pcomp"))
str(HighFreq::calc_weights)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="max_pcomp"))
library(HighFreq)
re_turns <- rutils::etf_env$re_turns
re_turns <- na.omit(re_turns)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="max_pcomp"))
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns)))
library(HighFreq)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="max_pcomp"))
foo <- HighFreq::calc_eigen(re_turns)
library(HighFreq)
library(HighFreq)
foo <- HighFreq::calc_eigen(re_turns)
library(HighFreq)
foo <- HighFreq::calc_eigen(re_turns)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="max_prcomp"))
pc_a <- prcomp(mat_rix)
pc_a <- prcomp(re_turns)
all.equal(abs(unname(pc_a$rotation[, NCOL(re_turns)])), abs(weight_s))
weight_s
pc_a$rotation[, NCOL(re_turns)]
foo <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="min_var"))
foo
cbind(weight_s, foo)
sum(weight_s^2)
foo <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="blah"))
foo
foo <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="min_var"))
foo
library(HighFreq)
library(HighFreq)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="min_var"))
all.equal(weight_s, foo)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen=NCOL(re_turns), typ_e="min_varpca"))
weight_s
foo
sort(weight_s)
sort(foo)
foo <- unname(pc_a$rotation[, NCOL(re_turns)])
sd(re_turns %*% foo)
foo <- foo*sd(re_turns %*% rep(1, NCOL(re_turns)))/sd(re_turns %*% foo)
sort(weight_s)
sort(foo)
pc_a <- prcomp(re_turns)
foo <- unname(pc_a$rotation[, NCOL(re_turns)])
foo <- foo*sd(re_turns %*% rep(1/NCOL(re_turns), NCOL(re_turns)))/sd(re_turns %*% foo)
sort(foo)
sort(weight_s)
sort(-foo)
dim(rutils::env_etf$price_s)
colnames(rutils::env_etf$price_s)
colnames(rutils::etf_env$re_turns)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
ei_gen <- eigen(cov(re_turns))
max_eigen <- 3
eigen_vec <- ei_gen$vectors[, 1:max_eigen]
eigen_val <- ei_gen$values[1:max_eigen]
in_verse <- eigen_vec %*% (t(eigen_vec) / eigen_val)
al_pha <- 0.5
col_means <- colMeans(re_turns)
col_means <- ((1-al_pha)*col_means + al_pha*mean(col_means))
weight_s <- in_verse %*% col_means
weights_r <- drop(weight_s/sum(weight_s))
n_col <- NCOL(re_turns)
weights_r <- weights_r*sd(re_turns %*% rep(1/n_col, n_col))/sd(re_turns %*% weights_r)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen, al_pha=al_pha))
all.equal(weight_s, weights_r)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
ei_gen <- eigen(cov(re_turns))
max_eigen <- 3
eigen_vec <- ei_gen$vectors[, 1:max_eigen]
eigen_val <- ei_gen$values[1:max_eigen]
in_verse <- eigen_vec %*% (t(eigen_vec) / eigen_val)
al_pha <- 0.5
col_means <- colMeans(re_turns)
col_means <- ((1-al_pha)*col_means + al_pha*mean(col_means))
weight_s <- in_verse %*% col_means
n_col <- NCOL(re_turns)
weights_r <- weights_r*sd(re_turns %*% rep(1/n_col, n_col))/sd(re_turns %*% weights_r)
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen, al_pha=al_pha))
all.equal(weight_s, weights_r)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
weight_s <- c(1, rep(0, 10))
weight_ed <- roll_conv(mat_rix=mat_rix, weight_s=rev(weight_s))
library(HighFreq)
library(HighFreq)
weight_ed <- HighFreq::roll_conv(mat_rix=mat_rix, weight_s=rev(weight_s))
weight_s <- matrix(c(1, rep(0, 10)), nc=1)
weight_s
weight_ed <- HighFreq::roll_conv(mat_rix=mat_rix, weight_s=weight_s)
all.equal(mat_rix, weight_ed, check.attributes=FALSE)
all.equal(coredata(mat_rix), weight_ed, check.attributes=FALSE)
all.equal(coredata(mat_rix), weight_ed)
tail(weight_ed)
tail(mat_rix)
dim(weight_ed)
dim(mat_rix)
weight_s <- exp(-0.2*1:11)
weight_s <- weight_s/sum(weight_s)
weight_s <- exp(-0.2*1:11)
weight_s <- matrix(weight_s/sum(weight_s), nc=1)
weight_s
weight_ed <- HighFreq::roll_conv(mat_rix=mat_rix, weight_s=weight_s)
filter_ed <- filter(x=mat_rix, filter=weight_s, method="convolution", sides=1)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
tail(filter_ed)
all.equal(as.numeric(filter_ed[, -(1:11)]), as.numeric(weight_ed[, -(1:11)]))
tail(filter_ed[, -(1:11)])
dim(filter_ed)
all.equal(as.numeric(filter_ed[-(1:11), ]), as.numeric(weight_ed[-(1:11), ]))
all.equal(filter_ed[-(1:11), ], weight_ed[-(1:11), ], check.attributes=FALSE)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
# Compile Rcpp functions
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
# Compile Rcpp functions
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
ls()
foo <- sample(1:11)
foo
ran_k(foo)
drop(ran_k(foo))
foo
order(ran_k(foo))
order(foo)
order(foo, decreasing=TRUE)
order(foo, decreasing=FALSE)
drop(ran_k(foo))
drop(ran_k(foo))+1
order(foo)
foo
foo[order(foo)]
foo <- runif(11, -1, 1)
foo
foo <- round(foo, 3)
foo
bar <- order(foo)
foo[bar]
foo[bar][bar]
foo[bar[bar]]
bar
foo
bar <- order(order(foo))
bar
barr <- order(order(foo))
bar <- order(foo)
foo[bar]
foo[bar][barr]
foo
(1:11)[barr]
barr
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:9])
foo <- HighFreq::calc_weights(re_turns, typ_e="rank")
foo
foo <- dro(HighFreq::calc_weights(re_turns, typ_e="rank"))
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
foo
colnames(re_turns)
library(HighFreq)
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
foo
library(HighFreq)
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
foo
sum(foo)
colnames(re_turns)
library(shiny); runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
re_turns <- returns_100
# Model and data setup
# source the model function
# source("C:/Develop/R/lecture_slides/scripts/roll_portf_new.R")
# max_eigen <- 2
load("C:/Develop/R/lecture_slides/data/sp500_prices.RData")
re_turns <- returns_100
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
round(foo, 3)
foo <- drop(HighFreq::calc_weights(re_turns["/2000"], typ_e="rank"))
library(HighFreq)
foo <- drop(HighFreq::calc_weights(re_turns["/2000"], typ_e="rank"))
round(foo, 3)
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
library(HighFreq)
runApp('app_roll_portf6.R')
ls()
# Model and data setup
# source the model function
# source("C:/Develop/R/lecture_slides/scripts/roll_portf_new.R")
# max_eigen <- 2
load("C:/Develop/R/lecture_slides/data/sp500_prices.RData")
dim(re_turns)
runApp('app_roll_portf6.R')
getwd()
Rcpp::compileAttributes(pkgdir = ".", verbose = getOption("verbose"))
Rcpp::compileAttributes(pkgdir = ".", verbose = getOption("verbose"))
roxygen2::document()
devtools::document()
getwd()
devtools::document(pkg = "C:/Develop/R/HighFreq")
library(HighFreq)
library(shiny); runApp('C:/Develop/R/presentations/app_roll_portf6.R')
library(HighFreq)
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:9])
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
foo
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:9])
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
foo
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
library(HighFreq)
library(IBrokers)
con_tract <- IBrokers::twsFuture(symbol="ES", exch="GLOBEX", expiry="201812")
source("C:/Develop/R/IBrokers/ibrokers_eWrapper.R")
data_dir <- "C:/Develop/data/ib_data"
file_name <- file.path(data_dir, "ES_ohlc_live_10_29_18.csv")
file_name
file_connect <- file(file_name, open="w")
ib_connect <- IBrokers::twsConnect(port=7497)
IBrokers::reqRealTimeBars(conn=ib_connect,
Contract=con_tract, barSize="10",
eventWrapper=eWrapper_realtimebars(1),
file=file_connect)
order_id
# Execute sell market order
order_id <- IBrokers::reqIds(ib_connect)
ib_order <- IBrokers::twsOrder(order_id, orderType="MKT",
action="SELL", totalQuantity=45)
IBrokers::placeOrder(ib_connect, con_tract, ib_order)
# Request trade order ID
order_id <- IBrokers::reqIds(ib_connect)
# Create buy market order object
ib_order <- IBrokers::twsOrder(order_id, orderType="MKT",
action="BUY", totalQuantity=46)
# Execute sell market order
order_id <- IBrokers::reqIds(ib_connect)
ib_order <- IBrokers::twsOrder(order_id, orderType="MKT",
action="SELL", totalQuantity=46)
IBrokers::placeOrder(ib_connect, con_tract, ib_order)
IBrokers::reqRealTimeBars(conn=ib_connect,
Contract=con_tract, barSize="10",
eventWrapper=eWrapper_realtimebars(1),
file=file_connect)
source("C:/Develop/R/IBrokers/ibrokers_eWrapper.R")
IBrokers::reqRealTimeBars(conn=ib_connect,
Contract=con_tract, barSize="10",
eventWrapper=eWrapper_realtimebars(1),
file=file_connect)
library(IBrokers)
con_tract <- IBrokers::twsFuture(symbol="ES", exch="GLOBEX", expiry="201812")
source("C:/Develop/R/IBrokers/ibrokers_eWrapper.R")
data_dir <- "C:/Develop/data/ib_data"
file_name <- file.path(data_dir, "ES_ohlc_live_10_29_18.csv")
file_name
file_connect <- file(file_name, open="w")
ib_connect <- IBrokers::twsConnect(port=7497)
source("C:/Develop/R/IBrokers/ibrokers_eWrapper.R")
# Execute buy market order
order_id <- IBrokers::reqIds(ib_connect)
ib_order <- IBrokers::twsOrder(order_id, orderType="MKT",
action="BUY", totalQuantity=70)
IBrokers::placeOrder(ib_connect, con_tract, ib_order)
IBrokers::reqRealTimeBars(conn=ib_connect,
Contract=con_tract, barSize="10",
eventWrapper=eWrapper_realtimebars(1),
file=file_connect)
IBrokers::twsDisconnect(ib_connect)
close(file_connect)
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:9])
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
HighFreq::calc_weights
library(HighFreq)
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:9])
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
foo
library(shiny); runApp('C:/Develop/R/presentations/app_roll_portf6.R')
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
dim(re_turns)
inter_val
inter_val <- "weeks"
look_back <- 1
# Define end points
end_points <- rutils::calc_endpoints(re_turns, inter_val=inter_val)
head(end_points)
n_weights
n_weights <- NCOL(re_turns)
risk_free <- 0.03/260
ex_cess <- (re_turns - risk_free)
# Define start_points
start_points <- c(rep_len(1, look_back-1), end_points[1:(len_gth-look_back+1)])
n_weights
# end_points <- ifelse(end_points<(n_weights+1), n_weights+1, end_points)
end_points <- end_points[end_points > (n_weights+1)]
head(end_points, 22)
len_gth <- NROW(end_points)
len_gth
# Define start_points
start_points <- c(rep_len(1, look_back-1), end_points[1:(len_gth-look_back+1)])
head(start_points, 22)
all.equal(start_points, end_points)
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:9])
foo <- drop(HighFreq::calc_weights(re_turns, typ_e="rank"))
foo
###############
### Get all file names with *.Rnw in the lecture_slides directory
file_names <- Sys.glob("C:/Develop/R/lecture_slides/*.Rnw")
# Get all *.Rnw files in the lecture_slides directory, except those that contain "FRE"
file_names <- file_names[-grep("FRE", file_names)]
file_names
###############
### Render *.Rnw files into *.pdf files.
# loop over all the *.Rnw files in the cwd, and render them into *.pdf files.
setwd("C:/Develop/R/lecture_slides")
sapply(file_names, knitr::knit2pdf)
###############
### Extract R chunks from all *.Rnw files, except those that contain "FRE".
sapply(file_names, knitr::purl, documentation=0)
library(HighFreq)
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
risk_free <- 0.03/260
ex_cess <- re_turns - risk_free
end_points <- rutils::calc_endpoints(re_turns, inter_val="months")
end_points <- end_points[end_points>50]
len_gth <- NROW(end_points)
look_back <- 12
start_points <- c(rep_len(1, look_back-1), end_points[1:(len_gth-look_back+1)])
al_pha <- 0.5
max_eigen <- 3
pnl_s <- HighFreq::back_test(ex_cess, re_turns,
start_points-1, end_points-1,
max_eigen, al_pha)
pnl_s <- xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
dygraphs::dygraph(cumsum(pnl_s),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
risk_free <- 0.03/260
ex_cess <- re_turns - risk_free
end_points <- rutils::calc_endpoints(re_turns, inter_val="months")
end_points <- end_points[end_points>50]
len_gth <- NROW(end_points)
look_back <- 12
start_points <- c(rep_len(1, look_back-1), end_points[1:(len_gth-look_back+1)])
al_pha <- 0.5
max_eigen <- 3
pnl_s <- HighFreq::back_test(ex_cess, re_turns,
start_points-1, end_points-1,
max_eigen, al_pha)
pnl_s <- xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
dygraphs::dygraph(cumsum(pnl_s),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
tail(start_points)
head(start_points)
str(HighFreq::back_test)
pnl_s <- HighFreq::back_test(ex_cess, re_turns, start_points-1, end_points-1, max_eigen = max_eigen, al_pha = al_pha)
pnl_s <- xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
dygraphs::dygraph(cumsum(pnl_s),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
library(HighFreq)
pnl_s <- HighFreq::back_test(ex_cess, re_turns, start_points-1, end_points-1, max_eigen = max_eigen, al_pha = al_pha)
pnl_s <- xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
dygraphs::dygraph(cumsum(pnl_s),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
search()
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
risk_free <- 0.03/260
ex_cess <- re_turns - risk_free
end_points <- rutils::calc_endpoints(re_turns, inter_val="months")
end_points <- end_points[end_points>50]
len_gth <- NROW(end_points)
look_back <- 12
start_points <- c(rep_len(1, look_back-1), end_points[1:(len_gth-look_back+1)])
al_pha <- 0.5
max_eigen <- 3
pnl_s <- HighFreq::back_test(ex_cess, re_turns, start_points-1, end_points-1, max_eigen = max_eigen, al_pha = al_pha)
pnl_s <- xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of Max Sharpe Portfolio Strategy")
search()
