back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
back_test <- t(roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts))
back_test
back_test <- roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test
source("C:/Develop/R/scripts/stat_arb_func_2017_09_12.R")
roll_backtest <- function(x_ts,
train_func, trade_func,
look_back=look_forward,
look_forward,
end_points=rutils::calc_endpoints(x_ts, look_forward),
...) {
# match train and trade functions
train_func <- match.fun(train_func)
trade_func <- match.fun(trade_func)
# define back_points and fwd_points
# n_row <- NROW(x_ts)
back_points <- end_points - look_back + 1
back_points[back_points<1] <- 1
fwd_points <- end_points + look_forward
fwd_points[fwd_points>NROW(x_ts)] <- NROW(x_ts)
# perform backtest over length of end_points
back_test <- sapply(2:(NROW(end_points)-1), function(in_dex) {
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]],
...)
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]],
trained_model, ...)
})  # end sapply
# coerce back_test into matrix and transpose it
if (is.vector(back_test))
back_test <- t(back_test)
back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
all.equal(back_test_old, back_test)
all.equal(foo, back_test)
back_test
back_test_old <- back_test
back_test <- roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
look_forward
trade_output <- trade_model(time_series = prices_ts,
calibrated_model = calibrated_model,
trading_params = trading_params)
source("C:/Develop/R/scripts/stat_arb_func_2017_09_12.R")
roll_backtest <- function(x_ts,
train_func, trade_func,
look_back=look_forward,
look_forward,
end_points=rutils::calc_endpoints(x_ts, look_forward),
...) {
# match train and trade functions
train_func <- match.fun(train_func)
trade_func <- match.fun(trade_func)
# define back_points and fwd_points
# n_row <- NROW(x_ts)
back_points <- end_points - look_back + 1
back_points[back_points<1] <- 1
fwd_points <- end_points + look_forward
fwd_points[fwd_points>NROW(x_ts)] <- NROW(x_ts)
# perform backtest over length of end_points
back_test <- sapply(2:(NROW(end_points)-1), function(in_dex) {
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]],
...)
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]],
trained_model, ...)
})  # end sapply
# coerce back_test into matrix and transpose it
if (is.vector(back_test))
back_test <- t(back_test)
back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
back_test <- roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test
end_points
is.numeric(end_points)
is.numeric(Sys.Date() + 1:5)
Sys.Date() + 1:5
end_points
rutils::calc_endpoints(prices_ts, look_forward)
index(prices_ts[end_points, ])
identical(x_ts, prices_ts)
x_ts <- prices_ts
identical(x_ts, prices_ts)
end_points <- index(prices_ts[end_points, ])
which(end_points==index(x_ts))
end_points
match(end_points==index(x_ts))
match(end_points, index(x_ts))
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
end_points
prices_ts[0, ]
library(HighFreq)
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
end_points <- index(prices_ts[end_points, ])
end_points
end_points <- c(start(prices_ts), end_points)
end_points
back_test <- roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test_old <- back_test
back_test <- HighFreq::roll_backtest(end_points=end_points,
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
library(HighFreq)
library(HighFreq)
library(HighFreq)
source("C:/Develop/R/scripts/stat_arb_func_2017_09_12.R")
prices_ts_all <- xts::as.xts(zoo::read.zoo(
file=file.path("C:/Develop/data",
"data prices close 2017-08-31.csv"),
header=TRUE, sep=",", FUN=as.Date, format="%m/%d/%Y"))
prices_ts_all <- prices_ts_all[, -which("XLR"==colnames(prices_ts_all))]
sum(is.na(prices_ts_all))
start_date <- start(prices_ts_all)
end_date <- end(prices_ts_all)
prices_ts <- prices_ts_all[paste(start_date, end_date, sep="/")]
prices_ts <- cbind(1:NROW(prices_ts), prices_ts)
colnames(prices_ts)[1] <- "index"
symbol_s <- c("XLP", "XLU")
model_type <- 1 # 0: OLS crossing the origin, 1: (default) ols, 2: TLS, 3: no-drift index, 4: no-drift dates
flag_sticky_stops <- TRUE  # use sticky stops, FALSE use regular stops
flag_print <- FALSE
flag_plot <- FALSE
trading_levels <- list(z_long_enter = -1.5,
z_long_profit = 0,
z_long_stop = -2.5,
z_short_enter = 1.5,
z_short_profit = 0,
z_short_stop = 2.5)
model_params <- list(
symbol_s=symbol_s,
model_type=model_type,
flag_print=flag_print,
flag_plot=flag_plot
)  # end list
trading_params <- list(
symbol_s=symbol_s,
trading_levels=trading_levels,
flag_sticky_stops=flag_sticky_stops,
flag_print=flag_print,
flag_plot=flag_plot
)  # end list
start_date <- start(prices_ts_all)
end_date <- end(prices_ts_all)
prices_ts <- prices_ts_all[paste(start_date, end_date, sep="/")]
start_point <- which(start_date==index(prices_ts_all))
end_point <- which(end_date==index(prices_ts_all))
look_forward <- 22
look_back <- 252  # about one year
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
back_test <- HighFreq::roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test
look_forward <- 2*22  # about twice monthly
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
back_test <- HighFreq::roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test_old <- back_test
end_points
end_points <- index(prices_ts[end_points, ])
end_points <- c(start(prices_ts), end_points)
end_points
back_test <- HighFreq::roll_backtest(end_points=end_points,
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
all.equal(back_test_old, back_test)
end_points
library(HighFreq)
?HighFreq::roll_backtest
library(HighFreq)
?HighFreq::roll_backtest
library(HighFreq)
?HighFreq::roll_backtest
library(HighFreq)
library(HighFreq)
ls()
library(HighFreq)  # load HighFreq
var_running <- 252*(24*60*60)^2*
HighFreq::run_variance(oh_lc=env_etf$VTI)
tail(var_running)
weight_s <- exp(0.1*1:win_dow)
source("C:/Develop/R/lecture_slides/scripts/ewma_model.R")
agg_regate <- function(oh_lc, lamb_das, ...) {
sapply(lamb_das, function(lamb_da) {
# simulate EWMA strategy and calculate Sharpe ratio
re_turns <-
simu_ewma(oh_lc=oh_lc, lamb_da=lamb_da, ...)[, "re_turns"]
sqrt(260)*sum(re_turns)/sd(re_turns)/NROW(re_turns)
})  # end sapply
}  # end agg_regate
agg_regate <- function(oh_lc, lamb_das, ...) {
sapply(lamb_das, function(lamb_da) {
# simulate EWMA strategy and calculate Sharpe ratio
re_turns <-
simu_ewma(oh_lc=oh_lc, lamb_da=lamb_da, ...)[, "re_turns"]
sqrt(260)*sum(re_turns)/sd(re_turns)/NROW(re_turns)
})  # end sapply
}  # end agg_regate
inter_val <- 31
lamb_das <- seq(0.001, 0.01, 0.001)
oh_lc <- rutils::env_etf$VTI["/2011"]
cl_ose <- Cl(oh_lc)
agg_regate(oh_lc, lamb_das, inter_val)
inter_val
library(googlesheets)
library(dplyr)
gs_auth(new_user=TRUE)
googlesheets::gs_ls()
getwd()
google_sheet <- gs_title("my_data")
google_sheet <- gs_title("FRE7241 grades Spring 2017")
google_sheet
gs_ws_ls(google_sheet)
google_sheet <- gs_title("my_data")
google_sheet
gs_ws_ls(google_sheet)
library(httr)
httr::set_config(config(ssl_verifypeer=0L))
gs_read(google_sheet)
gs_ws_ls(google_sheet)
tab_s <- gs_ws_ls(google_sheet)
tab_s[1]
library(httr)
httr::set_config(config(ssl_verifypeer=0L))
gs_read(google_sheet)
gs_read(google_sheet, ws=tab_s[1])
gs_read_csv(google_sheet, ws=tab_s[1])
gs_read_csv(google_sheet, ws=tab_s[2])
gs_download(google_sheet, ws=tab_s[1],
to="C:/Develop/R/lecture_slides/data/google_sheet.csv")
gs_browse(google_sheet)
library(HighFreq)  # load HighFreq
var_running <- HighFreq::run_variance(oh_lc=env_etf$VTI)
tail(var_running)
HighFreq::run_variance
foo <- diff(xts::.index(rutils::env_etf$VTI))
tail(foo)
foo <- xts::.index(rutils::env_etf$VTI)
tail(foo)
tail(rutils::env_etf$VTI)
foo <- xts::.index(rutils::env_etf$VTI)
class(foo)
class(index(rutils::env_etf$VTI))
foo <- xts(1:10, order.by=(Sys.Date() - 0:9))
foo
xts::.index(foo)
index(foo)
diff(index(foo))
as.numeric(index(foo))
var_running <- HighFreq::run_variance(oh_lc=env_etf$VTI, sca_le=FALSE)
tail(var_running)
inter_val <- 31
var_avg <- rutils::roll_sum(var_running,
win_dow=inter_val)/inter_val
args(rutils::roll_sum)
re_turns <- rutils::diff_xts(log(rutils::env_etf$VTI[, 4]))
end_points <- 0:NROW(re_turns)
len_gth <- NROW(end_points)
len_gth
look_back <- 31
start_points <-  end_points[
c(rep_len(1, look_back-1), 1:(len_gth-look_back+1))]
tail(start_points)
re_turns <- rutils::diff_xts(log(rutils::env_etf$VTI[, 4]))
end_points <- 0:NROW(re_turns)
len_gth <- NROW(end_points)
look_back <- 31
start_points <-  end_points[
c(rep_len(1, look_back-1), 1:(len_gth-look_back+1))]
var_running <- sapply(2:len_gth, function(in_dex) {
ret_s <- re_turns[start_points[in_dex]:end_points[in_dex]]
(ret_s - mean(ret_s))^2 / (look_back-1)
})  # end sapply
NROW(var_running)
NROW(re_turns)
tail(var_running)
class(var_running)
len_gth
var_running <- sapply(2:len_gth, function(in_dex) {
ret_s <- re_turns[start_points[in_dex]:end_points[in_dex], ]
(ret_s - mean(ret_s))^2 / (look_back-1)
})  # end sapply
class(var_running)
tail(var_running)
class(re_turns)
var_running <- sapply(2:len_gth, function(in_dex) {
ret_s <- re_turns[start_points[in_dex]:end_points[in_dex]]
sum(ret_s - mean(ret_s))^2 / (look_back-1)
})  # end sapply
class(var_running)
tail(var_running)
NROW(var_running)
tail(re_turns)
in_dex <- 100
ret_s <- re_turns[start_points[in_dex]:end_points[in_dex]]
ret_s
sum(ret_s - mean(ret_s))^2
mean(ret_s)
ret_s^2
sum((ret_s - mean(ret_s))^2)
var_running <- sapply(2:len_gth, function(in_dex) {
ret_s <- re_turns[start_points[in_dex]:end_points[in_dex]]
sum((ret_s - mean(ret_s))^2)
}) / (look_back-1)  # end sapply
tail(re_turns)
var_running <- xts(var_running, order.by=index(re_turns))
var_running <- sapply(2:len_gth, function(in_dex) {
ret_s <- re_turns[start_points[in_dex]:end_points[in_dex]]
sum((ret_s - mean(ret_s))^2)
}) / (look_back-1)  # end sapply
class(var_running)
var_running <- xts(var_running, order.by=index(re_turns))
install.packages("roll")
library(roll)  # load RcppRoll
class(var_running)
foo <- var_running
var_running <- roll::roll_var(re_turns, width=look_back)
tail(var_running)
tail(foo)
all.equal(var_running, foo)
colnames(foo) <- "VTI.Close"
all.equal(var_running, foo)
sum(is.na(var_running))
sum(is.na(foo))
head(var_running)
head(foo)
var_running <- roll::roll_var(re_turns, width=look_back)
colnames(var_running) <- "VTI.variance"
head(var_running)
sum(is.na(var_running))
look_back
var_running[1:(look_back-1)] <- 0
sum(is.na(var_running))
head(var_running)
library(microbenchmark)
summary(microbenchmark(
roll_sapply=sapply(2:len_gth, function(in_dex) {
ret_s <- re_turns[start_points[in_dex]:end_points[in_dex]]
sum((ret_s - mean(ret_s))^2)
}),
roll_roll=roll_var(re_turns, width=look_back),
times=10))[, c(1, 4, 5)]
install.packages("shinyapps")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
install.packages("Rcpp11")
install.packages("RcppExamples")
install.packages("RcppParallel")
install.packages("RcppParallel")
devtools::find_rtools()
devtools::has_devel()
system("g++ -v")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
system("g++ -v")
Sys.getenv("PATH")
system("g++ -v")
Sys.getenv("PATH")
system("g++ -v")
Sys.getenv("PATH")
system("g++ -v")
library(HighFreq)
library(HighFreq)
install.packages("RcppArmadillo")
library(HighFreq)
library(HighFreq)
ls("package:HighFreq")
roll_variance
roll_var
roll_wsum
library(HighFreq)
ls("package:HighFreq")
library(HighFreq)
ls("package:HighFreq")
library(HighFreq)
library(HighFreq)
ls("package:HighFreq")
roll_var
roll_wsum
library(microbenchmark)
foo <- rnorm(1e6)
look_back <- 11
weight_s <- exp(0.1*1:look_back)
weight_s <- weight_s/sum(weight_s)
foob <- filter(foo, filter=weight_s[11:1], sides=1)
foob[1:(look_back-1)] <- 0
foobar <- HighFreq::roll_wsum(foo, weight_s)
summary(microbenchmark(
pure_r=filter(foo, filter=weight_s, sides=1),
r_cpp=HighFreq::roll_wsum(foo, weight_s),
r_utils=rutils::roll_sum(foo, look_back=30),
times=10))[, c(1, 4, 5)]
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(microbenchmark)
library(HighFreq)
foo <- rnorm(1e6)
look_back <- 11
weight_s <- exp(0.1*1:look_back)
weight_s <- weight_s/sum(weight_s)
foobar <- HighFreq::roll_wsum(foo, weight_s)
foob <- filter(foo, filter=weight_s[11:1], sides=1)
foob[1:(look_back-1)] <- 0
summary(microbenchmark(
pure_r=filter(foo, filter=weight_s, sides=1),
r_cpp=HighFreq::roll_wsum(foo, weight_s),
r_utils=rutils::roll_sum(foo, look_back=30),
times=10))[, c(1, 4, 5)]
library(HighFreq)
foobar <- HighFreq::roll_wsum(foo, weight_s)
library(HighFreq)
foobar <- HighFreq::roll_wsum(foo, weight_s)
tail(foobar)
library(HighFreq)
foobar <- HighFreq::roll_wsum(foo, weight_s)
tail(foobar)
library(HighFreq)
library(HighFreq)
foo <- rnorm(1e6)
look_back <- 11
weight_s <- exp(0.1*1:look_back)
weight_s <- weight_s/sum(weight_s)
foo <- roll::roll_var(foo, weights=weight_s)
foo <- roll::roll_var(foo, weights=weight_s, width=NROW(weight_s))
foo <- rnorm(1e6)
look_back <- 11
weight_s <- exp(0.1*1:look_back)
weight_s <- weight_s/sum(weight_s)
foobar <- roll::roll_var(foo, weights=weight_s, width=NROW(weight_s))
class(foo)
foo <- matrix(rnorm(1e6), nc=1)
foob <- filter(foo, filter=weight_s[11:1], sides=1)
foobar <- HighFreq::roll_wsum(foo, weight_s)
tail(foob)
tail(foobar)
foobar <- roll::roll_var(foo, weights=weight_s, width=NROW(weight_s))
tail(foobar)
summary(microbenchmark(
pure_r=filter(foo, filter=weight_s, sides=1),
r_cpp=HighFreq::roll_wsum(foo, weight_s),
r_oll=roll::roll_var(foo, weights=weight_s, width=NROW(weight_s)),
times=10))[, c(1, 4, 5)]
library(microbenchmark)
summary(microbenchmark(
pure_r=filter(foo, filter=weight_s, sides=1),
r_cpp=HighFreq::roll_wsum(foo, weight_s),
r_oll=roll::roll_var(foo, weights=weight_s, width=NROW(weight_s)),
times=10))[, c(1, 4, 5)]
