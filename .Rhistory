Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
wei_ghts <- c(1, rep(0, 10))
vec_tor <- coredata(rutils::env_etf$VTI[, 6])
library(HighFreq)
vec_tor <- coredata(rutils::env_etf$VTI[, 6])
foo <- roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
foo <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
foo <- roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
bar <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
as.numeric(head(vec_tor, 22))
as.numeric(head(foo, 22))
as.numeric(head(bar, 22))
wei_ghts
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
foo <- roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
bar <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
as.numeric(head(vec_tor, 22))
as.numeric(head(foo, 22))
as.numeric(head(bar, 22))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
foo <- roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
bar <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
as.numeric(head(vec_tor, 22))
as.numeric(head(foo, 22))
as.numeric(head(bar, 22))
all.equal(as.numeric(vec_tor), as.numeric(foo))
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
vec_tor <- coredata(rutils::env_etf$VTI[, 6])
foo <- roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
bar <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
as.numeric(head(vec_tor, 22))
as.numeric(head(foo, 22))
as.numeric(head(bar, 22))
all.equal(as.numeric(bar[-(1:11)]), as.numeric(foo[-(1:11)]))
library(microbenchmark)
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
pure_r=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
vec_tor <- as.numeric(rutils::env_etf$VTI[, 6])
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
vec_tor <- as.numeric(rutils::env_etf$VTI[, 6])
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(vec_tor), as.numeric(weight_ed))
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
vec_tor <- as.numeric(rutils::env_etf$VTI[, 6])
weight_ed <- roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(vec_tor), as.numeric(weight_ed))
as.numeric(head(vec_tor, 22))
as.numeric(head(weight_ed, 22))
as.numeric(head(filter_ed, 22))
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
wei_ghts <- c(1, rep(0, 10))
weight_ed <- roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
all.equal(as.numeric(vec_tor), as.numeric(weight_ed))
library(HighFreq)
wei_ghts <- c(1, rep(0, 10))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
all.equal(vec_tor, as.numeric(weight_ed))
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
library(microbenchmark)
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
pure_r=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
453.0480/79.9065
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
wei_ghts
filter_ed <- roll_wsum_arma(vec_tor, wei_ghts)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
as.numeric(head(vec_tor, 22))
as.numeric(head(weight_ed, 22))
as.numeric(head(filter_ed, 22))
wei_ghts
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
as.numeric(head(vec_tor, 22))
as.numeric(head(weight_ed, 22))
as.numeric(head(filter_ed, 22))
library(HighFreq)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
as.numeric(head(vec_tor, 22))
as.numeric(head(weight_ed, 22))
as.numeric(head(filter_ed, 22))
as.numeric(tail(vec_tor, 22))
as.numeric(tail(weight_ed, 22))
as.numeric(tail(filter_ed, 22))
wei_ghts <- c(1, rep(0, 10))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- roll_wsum_arma(vec_tor, wei_ghts)
wei_ghts
1e-4
wei_ghts <- c(1, rep(1e-5, 10))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- roll_wsum_arma(vec_tor, wei_ghts)
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
filter_ed <- roll_wsum_arma(vec_tor, wei_ghts)
NROW(vec_tor)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
tail(vec_tor)
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
filter_ed <- roll_wsum_arma(vec_tor, wei_ghts)
tail(filter_ed)
wei_ghts <- c(1, rep(1e-5, 10))
filter_ed <- roll_wsum_arma(vec_tor, wei_ghts)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
NROW(weight_ed)
NROW(filter_ed)
as.numeric(tail(weight_ed, 22))
as.numeric(tail(filter_ed, 22))
tail(vec_tor, 22)
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(tail(filter_ed, 22)), 2)
filter_ed <- roll_wsum_arma(vec_tor, rev(wei_ghts))
round(as.numeric(tail(filter_ed, 22)), 2)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/temp.cpp")
filter_ed <- roll_wsum_arma(vec_tor, rev(wei_ghts))
round(as.numeric(tail(filter_ed, 22)), 2)
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(head(filter_ed, 22)), 2)
round(as.numeric(head(weight_ed, 22)), 2)
round(as.numeric(head(filter_ed[-(1:11)], 22)), 2)
round(as.numeric(head(filter_ed[-(1:10)], 22)), 2)
all.equal(as.numeric(filter_ed[-(1:10)]), as.numeric(weight_ed))
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
arma=roll_wsum_arma(vec_tor, rev(wei_ghts)),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
arma=roll_wsum_arma(vec_tor, rev(wei_ghts)),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
arma=roll_wsum_arma(vec_tor, rev(wei_ghts)),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
vec_tor <- as.numeric(rutils::env_etf$VTI[, 6])
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(vec_tor), as.numeric(weight_ed))
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
filter_ed <- roll_wsum_arma(vec_tor, rev(wei_ghts))
all.equal(as.numeric(filter_ed[-(1:10)]), as.numeric(weight_ed))
all.equal(as.numeric(vec_tor), as.numeric(weight_ed))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- roll_wsum_arma(vec_tor, rev(wei_ghts))
all.equal(as.numeric(filter_ed[-(1:10)]), as.numeric(weight_ed))
round(as.numeric(head(filter_ed[-(1:11)], 22)), 2)
round(as.numeric(head(filter_ed[-(1:10)], 22)), 2)
round(as.numeric(head(weight_ed, 22)), 2)
weight_ed <- roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(tail(filter_ed, 22)), 2)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
library(HighFreq)
vec_tor <- as.numeric(rutils::env_etf$VTI[, 6])
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
filter_ed <- roll_wsum_arma(vec_tor, rev(wei_ghts))
all.equal(as.numeric(filter_ed[-(1:10)]), as.numeric(weight_ed))
NROW(filter_ed)
NROW(weight_ed)
filter_ed <- roll_wsum_arma(vec_tor, rev(wei_ghts))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
filter_ed <- roll_wsum_arma(vec_tor, rev(wei_ghts))
all.equal(as.numeric(filter_ed[-(1:10)]), as.numeric(weight_ed))
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(tail(filter_ed, 22)), 2)
wei_ghts <- c(1, rep(1e-5, 10))
filter_ed <- roll_wsum_arma(vec_tor, rev(wei_ghts))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(tail(filter_ed, 22)), 2)
all.equal(round(as.numeric(tail(weight_ed, 22)), 2), round(as.numeric(tail(filter_ed, 22)), 2))
round(as.numeric(head(filter_ed[-(1:10)], 22)), 2)
round(as.numeric(head(weight_ed, 22)), 2)
all.equal(as.numeric(filter_ed[-(1:10)]), as.numeric(weight_ed))
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
all.equal(as.numeric(filter_ed[-(1:10)]), as.numeric(weight_ed))
round(as.numeric(head(filter_ed[-(1:10)], 22)), 2)
round(as.numeric(head(weight_ed, 22)), 2)
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(tail(filter_ed, 22)), 2)
all.equal(as.numeric(filter_ed[-(1:10)]), as.numeric(weight_ed))
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
arma=roll_wsum_arma(vec_tor, rev(wei_ghts)),
pure_r=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
arma=roll_wsum_arma(vec_tor, rev(wei_ghts)),
pure_r=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
404.6645/88.7040
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
vec_tor <- as.numeric(rutils::env_etf$VTI[, 6])
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
library(microbenchmark)
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
arma=roll_wsum_arma(vec_tor, rev(wei_ghts)),
r_code=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
arma=roll_wsum_armaa(vec_tor, rev(wei_ghts)),
r_code=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
foo <- roll_wsum_armaa(vec_tor, rev(wei_ghts))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
vec_tor <- as.numeric(rutils::env_etf$VTI[, 6])
foo <- roll_wsum_armaa(vec_tor, rev(wei_ghts))
rev(wei_ghts)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
foo <- roll_wsum_armaa(vec_tor, rev(wei_ghts))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_wsum.cpp")
foo <- roll_wsum_armaa(vec_tor, rev(wei_ghts))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- foo
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(tail(filter_ed, 22)), 2)
round(as.numeric(head(weight_ed, 22)), 2)
round(as.numeric(head(filter_ed, 22)), 2)
library(microbenchmark)
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
arma=roll_wsum_armaa(vec_tor, rev(wei_ghts)),
r_code=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
all.equal(as.numeric(filter_ed), as.numeric(weight_ed))
round(as.numeric(tail(weight_ed, 22)), 4)
round(as.numeric(tail(filter_ed, 22)), 4)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
432.2775/64.5125
library(HighFreq)
vec_tor <- as.numeric(rutils::env_etf$VTI[, 6])
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(tail(filter_ed, 22)), 2)
wei_ghts <- c(1, rep(1e-5, 10))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts)
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(vec_tor), as.numeric(weight_ed))
round(as.numeric(tail(weight_ed, 22)), 2)
round(as.numeric(tail(vec_tor, 22)), 2)
round(as.numeric(head(vec_tor, 22)), 2)
round(as.numeric(head(weight_ed, 22)), 2)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=rev(wei_ghts))
round(as.numeric(head(vec_tor, 22)), 2)
round(as.numeric(head(weight_ed, 22)), 2)
round(as.numeric(tail(vec_tor, 22)), 2)
round(as.numeric(tail(weight_ed, 22)), 2)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
library(microbenchmark)
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
r_code=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
408.5740/67.4445
wei_ghts
wei_ghts <- exp(-0.2*1:11)
wei_ghts <- wei_ghts/sum(wei_ghts)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=rev(wei_ghts))
filter_ed <- filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1)
all.equal(as.numeric(filter_ed[-(1:11)]), as.numeric(weight_ed[-(1:11)]))
all.equal(as.numeric(filter_ed), as.numeric(weight_ed))
wei_ghts <- c(1, rep(0, 10))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=rev(wei_ghts))
all.equal(vec_tor, as.numeric(weight_ed))
library(HighFreq)
summary(microbenchmark(
rcpp=HighFreq::roll_wsum(vec_tor=vec_tor, wei_ghts=wei_ghts),
r_code=filter(x=vec_tor, filter=wei_ghts, method="convolution", sides=1, circular=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
2.1+e
r_norm <- rnorm(100)
ari_ma <- numeric(100)
ari_ma[5] <- 0
ari_ma <- numeric(100)
ari_ma[1] <- 5
co_eff <- 0.8
r_norm <- rnorm(100)
ari_ma <- numeric(100)
ari_ma[1] <- 5
co_eff <- 0.8
for (i in 2:100) z[i] <- co_eff*z[i-1] + r_norm[i]
for (i in 2:100) ari_ma[i] <- co_eff*ari_ma[i-1] + r_norm[i]
tail(ari_ma)
co_eff <- -0.8
for (i in 2:100) ari_ma[i] <- co_eff*ari_ma[i-1] + r_norm[i]
tail(ari_ma)
foo <- ari_ma
ari_ma[1] <- 5
for (i in 2:100) ari_ma[i] <- co_eff*ari_ma[i-1] + r_norm[i-1]
foo <- ari_ma
tail(foo)
ari_ma <- filter(c(5, r_norm), filter=co_eff, method="recursive")
all.equal(ari_ma, foo)
all.equal(as.numeric(ari_ma), foo)
tail(cbind(as.numeric(ari_ma), foo))
tail(cbind(as.numeric(ari_ma[-1]), foo))
head(cbind(as.numeric(ari_ma[-1]), foo))
all.equal(as.numeric(ari_ma[-100]), foo)
head(cbind(as.numeric(ari_ma[-100]), foo))
tail(cbind(as.numeric(ari_ma[-100]), foo))
all.equal(as.numeric(ari_ma[-(99:100)]), foo[-100])
tail(cbind(as.numeric(ari_ma[-(99:100)]), foo[-100]))
tail(cbind(as.numeric(ari_ma[-100]), foo))
tail(cbind(as.numeric(ari_ma[-(100:101)]), foo[-100]))
all.equal(as.numeric(ari_ma[-(100:101)]), foo[-100])
co_eff <- c(-0.8, 0.2)
ari_ma[1] <- 5
ari_ma <- numeric(100)
ari_ma[1] <- 5
ari_ma[2] <- co_eff[1]*ari_ma[1] r_norm[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + r_norm[1]
ari_ma[1]
ari_ma[2]
for (i in 3:100) ari_ma[i] <- co_eff[1]*ari_ma[i-1] + co_eff[2]*ari_ma[i-2] + r_norm[i-1]
foo <- ari_ma
ari_ma <- filter(c(5, r_norm), filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma[-(100:101)]), foo[-100])
tail(ari_ma)
?arima.sim
in_nov <- r_norm
rm(r_norm)
ari_ma <- numeric(NROW(in_nov))
co_eff <- -0.8
ari_ma[1] <- in_nov[1]
for (i in 2:NROW(in_nov)) ari_ma[i] <- co_eff*ari_ma[i-1] + in_nov[i]
foo <- ari_ma
ari_ma <- filter(c(in_nov), filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma[-(100:101)]), foo[-100])
NROW(ari_ma)
NROW(foo)
all.equal(as.numeric(ari_ma), foo)
ari_ma <- filter(c(in_nov), filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
ari_ma[1] <- in_nov[1]
for (i in 2:NROW(in_nov)) ari_ma[i] <- co_eff*ari_ma[i-1] + in_nov[i]
foo <- ari_ma
ari_ma <- filter(c(in_nov), filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
ari_ma <- numeric(NROW(in_nov))
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
for (i in 2:NROW(in_nov)) ari_ma[i] <- co_eff*ari_ma[i-1] + in_nov[i]
foo <- ari_ma
ari_ma <- filter(c(in_nov), filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
co_eff <- c(-0.8, 0.2)
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in 3:100) ari_ma[i] <- co_eff[1]*ari_ma[i-1] + co_eff[2]*ari_ma[i-2] + in_nov[i-1]
foo <- ari_ma
ari_ma <- filter(c(5, in_nov), filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in 3:NROW(in_nov)) ari_ma[i] <- co_eff[1]*ari_ma[i-1] + co_eff[2]*ari_ma[i-2] + in_nov[i]
foo <- ari_ma
ari_ma <- filter(in_nov, filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
ari_ma <- numeric(NROW(in_nov))
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in (NROW(co_eff)+1):NROW(in_nov)) {
ari_ma[i] <- co_eff %*% ari_ma[(i-NROW(co_eff)):(i-1)] + in_nov[i]
}
foo <- ari_ma
ari_ma <- filter(in_nov, filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in (NROW(co_eff)+1):NROW(in_nov)) {
ari_ma[i] <- co_eff %*% ari_ma[(i-NROW(co_eff)):(i-1)] + in_nov[i]
}
foo <- ari_ma
ari_ma <- filter(in_nov, filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in 3:NROW(in_nov)) {
ari_ma[i] <- co_eff[1]*ari_ma[i-1] + co_eff[2]*ari_ma[i-2] + in_nov[i]
}
foo <- ari_ma
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in (NROW(co_eff)+1):NROW(in_nov)) {
ari_ma[i] <- co_eff %*% ari_ma[(i-NROW(co_eff)):(i-1)] + in_nov[i]
}
all.equal(as.numeric(ari_ma), foo)
co_eff
class(ari_ma)
tail(ari_ma)
head(ari_ma)
ari_ma[2:5]
ari_ma[5:2]
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in (NROW(co_eff)+1):NROW(in_nov)) {
ari_ma[i] <- co_eff %*% ari_ma[(i-1):(i-NROW(co_eff))] + in_nov[i]
}
all.equal(as.numeric(ari_ma), foo)
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in 3:NROW(in_nov)) {
ari_ma[i] <- co_eff[1]*ari_ma[i-1] + co_eff[2]*ari_ma[i-2] + in_nov[i]
}
foo <- ari_ma
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
ari_ma[2] <- co_eff[1]*ari_ma[1] + in_nov[2]
for (i in (NROW(co_eff)+1):NROW(in_nov)) {
ari_ma[i] <- co_eff %*% ari_ma[(i-1):(i-NROW(co_eff))] + in_nov[i]
}
all.equal(as.numeric(ari_ma), foo)
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
for (i in 2:NROW(co_eff)) {
ari_ma[i] <- co_eff[1:(i-1)] %*% ari_ma[(i-1):1] + in_nov[i]
}
for (i in (NROW(co_eff)+1):NROW(in_nov)) {
ari_ma[i] <- co_eff %*% ari_ma[(i-1):(i-NROW(co_eff))] + in_nov[i]
}
foo <- ari_ma
ari_ma <- filter(in_nov, filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/sim_arima.cpp")
co_eff <- c(-0.8, 0.2)
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
for (i in 2:NROW(co_eff)) {
ari_ma[i] <- co_eff[1:(i-1)] %*% ari_ma[(i-1):1] + in_nov[i]
}
for (i in (NROW(co_eff)+1):NROW(in_nov)) {
ari_ma[i] <- co_eff %*% ari_ma[(i-1):(i-NROW(co_eff))] + in_nov[i]
}
foo <- ari_ma
ari_ma <- filter(in_nov, filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
ari_ma <- sim_arima(in_nov, co_eff)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/sim_arima.cpp")
ari_ma <- sim_arima(in_nov, co_eff)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/sim_arima.cpp")
ari_ma <- sim_arima(in_nov, co_eff)
all.equal(as.numeric(ari_ma), foo)
co_eff <- c(-0.8, 0.2)
ari_ma <- numeric(NROW(in_nov))
ari_ma[1] <- in_nov[1]
for (i in 2:NROW(co_eff)) {
ari_ma[i] <- co_eff[1:(i-1)] %*% ari_ma[(i-1):1] + in_nov[i]
}
for (i in (NROW(co_eff)+1):NROW(in_nov)) {
ari_ma[i] <- co_eff %*% ari_ma[(i-1):(i-NROW(co_eff))] + in_nov[i]
}
foo <- ari_ma
ari_ma <- filter(in_nov, filter=co_eff, method="recursive")
all.equal(as.numeric(ari_ma), foo)
ari_ma <- sim_arima(in_nov, rev(co_eff))
all.equal(as.numeric(ari_ma), foo)
bar <- cbind(as.numeric(ari_ma), foo)
tail(bar)
head(bar)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/sim_arima.cpp")
