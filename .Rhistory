# replace suspect values with NA, and perform 'locf'
mid_prices[jump_values(mid_prices)] <- NA
mid_prices <- na.locf(mid_prices)
#  mid_prices <- na.locf(mid_prices, fromLast=TRUE)
# cbind mid_prices with volume data, and replace NA volumes with zero
mid_prices <- cbind(mid_prices, taq_data[index(mid_prices), "Volume"])
mid_prices[is.na(mid_prices[, "Volume"]), "Volume"] <- 0
# aggregate to OHLC and cumulative volume data
mid_prices <- switch(period,
"minutes"={sec_onds <- 60; to.period(x=mid_prices, period=period)},
"3 min"={sec_onds <- 3*60; to.minutes3(x=mid_prices)},
"5 min"={sec_onds <- 5*60; to.minutes5(x=mid_prices)},
"10 min"={sec_onds <- 10*60; to.minutes10(x=mid_prices)},
"15 min"={sec_onds <- 15*60; to.minutes15(x=mid_prices)},
"30 min"={sec_onds <- 30*60; to.minutes30(x=mid_prices)},
"hours"={sec_onds <- 60*60; to.period(x=mid_prices, period=period)}
)  # end switch
# round up times to next period
index(mid_prices) <- align.time(x=index(mid_prices), n=sec_onds)
mid_prices
}  # end scrub_agg
ohlc_data <- scrub_agg(taq_data, period="10 minutes")
ohlc_data <- scrub_agg(taq_data)
dim(ohlc_data)
head(ohlc_data)
ohlc_data <- scrub_agg(taq_data, period="10 min")
head(ohlc_data)
chartSeries(ohlc_data, name=sym_bol, theme=chartTheme("white"))
ohlc_data <- scrub_agg(taq_data)
chartSeries(ohlc_data, name=sym_bol, theme=chartTheme("white"))
library(HighFreq)
library(HighFreq)
getwd()
save_OHLC("SPY")
save_OHLC("SPY")
ls()
rm(SPY)
load(file="SPY.RData")  # big file
sym_bol
chartSeries(SPY["2013"], name=sym_bol, theme=chartTheme("white"))
chartSeries(SPY["2013-05"], name=sym_bol, theme=chartTheme("white"))
library(HighFreq)
sym_bol <- "SPY"
paste0(sym_bol, "/2014.05.02.", sym_bol, ".RData")
load(file.path(data_dir, paste0(sym_bol, "/2014.05.02.", sym_bol, ".RData")))
head(SPY)
ls()
rm(SPY)
load(file=paste0(sym_bol, ".RData"))
ls()
chartSeries(SPY["2013-05"], name=sym_bol, theme=chartTheme("white"))
head(sym_bol)
head("sym_bol")
ls()
head(get(sym_bol))
library(HighFreq)
library(HighFreq)
?HighFreq
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(highfrequency)
?tradesCleanup
tradesCleanup
?.check_data
library(HighFreq)
ls()
library(HighFreq)
Sys.setenv(TZ="America/New_York")  # Set the time-zone to GMT
setwd("C:/Develop/data")
options(digits.secs=6)
options(digits=5)
options(stringsAsFactors=FALSE)
options(max.print=80)
data_dir <- "E:/mktdata/sec/"
output_dir <- "E:/output/data/"
sym_bol <- "SPY"
load(file.path(data_dir, paste0(sym_bol, "/2014.05.02.", sym_bol, ".RData")))
scrub_data <- scrub_agg(taq_data=get(sym_bol))
chartSeries(scrub_data, name=sym_bol, theme=chartTheme("white"))
file_dir <- file.path(data_dir, sym_bol)
file_list <- list.files(file_dir)
file_names <- file.path(file_dir, file_list)
taq_data <- sapply(tail(file_names), function(file_name) {
cat("loading", file_name, "\n")
data_name <- load(file_name)
get(data_name)
})
length(taq_data)
taq_data <- lapply(taq_data, scrub_agg)
taq_data <- do_call_rbind(taq_data)
colnames(taq_data) <- sapply(strsplit(colnames(taq_data), split="[.]"),
function(strng) paste(sym_bol, strng[-1], sep="."))
chartSeries(taq_data, name=sym_bol, theme=chartTheme("white"))
scrub_agg <- function(taq_data, vol_window=51, thresh_old=2, period="minutes") {
cat("start scrub_agg\n")
# convert timezone of index to New_York
index(taq_data) <- with_tz(time=index(taq_data), tzone="America/New_York")
# subset data to NYSE trading hours
taq_data <- taq_data['T09:30:00/T16:00:00', ]
# return NULL if no data
if (nrow(taq_data)==0)  return(NULL)
to_day <- as.Date(index(first(taq_data)))
# remove duplicate time stamps using 'duplicated'
taq_data <- taq_data[!duplicated(index(taq_data)), ]
# scrub quotes with suspect bid-offer spreads
bid_offer <- taq_data[, "Ask.Price"] - taq_data[, "Bid.Price"]
#  bid_offer <- na.omit(bid_offer)
sus_pect <- extreme_values(bid_offer, vol_window=vol_window, thresh_old=thresh_old)
# remove suspect values
taq_data <- taq_data[!sus_pect]
cat("dim taq_data:", dim(taq_data), "\n")
# replace suspect values
# taq_data[sus_pect, "Bid.Price"] <- taq_data[sus_pect, "Trade.Price"]
# taq_data[sus_pect, "Ask.Price"] <- taq_data[sus_pect, "Trade.Price"]
# scrub quotes with suspect price jumps
# calculate mid prices
mid_prices <- 0.5 * (taq_data[, "Bid.Price"] + taq_data[, "Ask.Price"])
#  mid_prices <- na.omit(mid_prices)
colnames(mid_prices) <- "Mid.Price"
# replace suspect values with NA, and perform 'locf'
mid_prices[jump_values(mid_prices)] <- NA
mid_prices <- na.locf(mid_prices)
#  mid_prices <- na.locf(mid_prices, fromLast=TRUE)
# cbind mid_prices with volume data, and replace NA volumes with zero
mid_prices <- cbind(mid_prices, taq_data[index(mid_prices), "Volume"])
mid_prices[is.na(mid_prices[, "Volume"]), "Volume"] <- 0
cat("length mid_prices:", length(mid_prices), "\n")
# aggregate to OHLC and cumulative volume data
mid_prices <- switch(period,
"minutes"={sec_onds <- 60; to.period(x=mid_prices, period=period)},
"3 min"={sec_onds <- 3*60; to.minutes3(x=mid_prices)},
"5 min"={sec_onds <- 5*60; to.minutes5(x=mid_prices)},
"10 min"={sec_onds <- 10*60; to.minutes10(x=mid_prices)},
"15 min"={sec_onds <- 15*60; to.minutes15(x=mid_prices)},
"30 min"={sec_onds <- 30*60; to.minutes30(x=mid_prices)},
"hours"={sec_onds <- 60*60; to.period(x=mid_prices, period=period)}
)  # end switch
# round up times to next period
index(mid_prices) <- align.time(x=index(mid_prices), n=sec_onds)
cat("dim mid_prices:", dim(mid_prices), "\n")
mid_prices
}  # end scrub_agg
save_OHLC <- function(sym_bol,
data_dir="E:/mktdata/sec/",
output_dir="E:/output/data/",
period="minutes") {
cat("start save_OHLC\n")
# create path to directory containing *.RData files
file_dir <- file.path(data_dir, sym_bol)
# get list of *.RData files
file_list <- list.files(file_dir)
# create paths to *.RData files
file_names <- file.path(file_dir, file_list)
cat("load data\n")
# load data into list
taq_data <- sapply(tail(file_names), function(file_name) {
cat("loading", sym_bol, "frome file: ", file_name, "\n")
data_name <- load(file_name)
get(data_name)
})
# scrub and aggregate the data
cat("scrub and aggregate\n")
taq_data <- sapply(taq_data, scrub_agg)
# recursively "rbind" the list into a single xts
cat("rbind\n")
taq_data <- do_call_rbind(taq_data)
# assign proper column names
colnames(taq_data) <- sapply(strsplit(colnames(taq_data), split="[.]"),
function(strng) paste(sym_bol, strng[-1], sep="."))
# copy the xts data to a variable with the name 'sym_bol'
cat("copy by assign\n")
assign(sym_bol, taq_data)
# save the xts data to a file in the output_dir
cat("save\n")
save(list=eval(sym_bol), file=file.path(output_dir, paste0(sym_bol, ".RData")))
}  # end save_OHLC
save_OHLC(sym_bol, data_dir=data_dir)
library(HighFreq)
library(HighFreq)
Sys.setenv(TZ="America/New_York")  # Set the time-zone to GMT
setwd("C:/Develop/data")
options(digits.secs=6)
options(digits=5)
options(stringsAsFactors=FALSE)
options(max.print=80)
data_dir <- "E:/mktdata/sec/"
output_dir <- "E:/output/data/"
sym_bol <- "SPY"
save_OHLC(sym_bol, data_dir=data_dir, period="15 min")
ls()
load(file.path(output_dir, paste0(sym_bol, ".RData")))
ls()
chartSeries(get(sym_bol), name=sym_bol, theme=chartTheme("white"))
load(file.path(data_dir, paste0(sym_bol, "/2014.05.02.", sym_bol, ".RData")))
scrub_data <- scrub_agg(taq_data=get(sym_bol))
head(scrub_data)
library(HighFreq)
library(HighFreq)
ls()
chartSeries(scrub_data, name=sym_bol, theme=chartTheme("white"))
colnames(scrub_data)
colnames(scrub_data) <- sapply(strsplit(colnames(scrub_data), split="[.]"),
function(strng) paste(sym_bol, strng[-1], sep="."))
colnames(scrub_data)
strsplit(colnames(scrub_data), split="[.]")
load(file.path(data_dir, paste0(sym_bol, "/2014.05.02.", sym_bol, ".RData")))
strsplit(colnames(scrub_data), split="[.]")
scrub_data <- scrub_agg(taq_data=get(sym_bol))
strsplit(colnames(scrub_data), split="[.]")
class(strsplit(colnames(scrub_data), split="[.]"))
colnames(scrub_data) <- lapply(strsplit(colnames(scrub_data), split="[.]"),
function(strng) paste(sym_bol, strng[-1], sep="."))
strsplit(colnames(scrub_data), split="[.]")
ls()
rm(scrub_data)
ts_data <- scrub_agg(taq_data=get(sym_bol))
ts_data <- quantmod.OHLC(ts_data)
ts_data <- as.quantmod.OHLC(ts_data)
ts_data <- scrub_agg(taq_data=get(sym_bol))
colnames(ts_data)
as.quantmod.OHLC
quantmod:::as.quantmod.OHLC
as.quantmod.OHLC.quantmod
as.quantmod.OHLC.xts
quantmod:::as.quantmod.OHLC.quantmod
quantmod:::as.quantmod.OHLC
quantmod:::as.quantmod
methods(as.quantmod.OHLC)
as.quantmod.OHLC.zoo
quantmod:::as.quantmod.OHLC.zoo
ts_data <- scrub_agg(taq_data=get(sym_bol))
ts_data <- as.quantmod.OHLC(x=ts_data, col.names=c("Open", "High", "Low", "Close", "Volume"))
is.quantmod.OHLC(ts_data)
is.OHLC(ts_data)
head(ts_data)
library(HighFreq)
ls()
as.quantmod.OHLC
methods(as.quantmod.OHLC)
install.packages("xts")
library(HighFreq)
library(zoo)
install.packages("lattice")
library(zoo)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
getwd()
Sys.setenv(TZ="America/New_York")  # Set the time-zone to GMT
setwd("C:/Develop/data")
options(digits.secs=6)
options(digits=5)
options(stringsAsFactors=FALSE)
options(max.print=80)
data_dir <- "E:/mktdata/sec/"
output_dir <- "E:/output/data/"
sym_bols <- read.csv(file="etf_list_hf.csv")
sym_bols <- sym_bols[[1]]
sym_bols
sym_bols <- read.csv(file="etf_list_hf.csv")
sym_bols
sym_bols <- sym_bols[[1]]
sym_bol <- "SPY"
load(file.path(data_dir, paste0(sym_bol, "/2014.05.02.", sym_bol, ".RData")))
ls()
library(HighFreq)
ls()
ts_data <- scrub_agg(taq_data=get(sym_bol))
chartSeries(ts_data, name=sym_bol, theme=chartTheme("white"))
taq_data <- scrub_TAQ(taq_data=get(sym_bol))
dim(taq_data)
dim(ts_data)
dim(get(sym_bol))
head(taq_data)
Sys.timezone()
attributes(taq_data)
head(taq_data)
Sys.timezone()
getwd()
ls()
save(sym_bols, file="hf_data.RData")
library(HighFreq)
ls()
library(HighFreq)
ls()
Sys.setenv(TZ="America/New_York")  # Set the time-zone to GMT
options(digits.secs=6)
options(digits=5)
options(stringsAsFactors=FALSE)
options(max.print=80)
data_dir <- "E:/mktdata/sec/"
output_dir <- "E:/output/data/"
data("hf_data")
ls()
sym_bols
library(HighFreq)
library(HighFreq)
ls()
load(file.path(data_dir, paste0(sym_bol, "/2014.05.02.", sym_bol, ".RData")))
Sys.setenv(TZ="America/New_York")  # Set the time-zone to GMT
options(digits.secs=6)
options(digits=5)
options(stringsAsFactors=FALSE)
options(max.print=80)
data_dir <- "E:/mktdata/sec/"
output_dir <- "E:/output/data/"
data("hf_data")
sym_bol <- "SPY"
ls()
load(file.path(data_dir, paste0(sym_bol, "/2014.05.02.", sym_bol, ".RData")))
ls()
taq_data <- scrub_TAQ(taq_data=get(sym_bol))
ls()
diff_series <- 0.5 * (taq_data[, "Bid.Price"] + taq_data[, "Ask.Price"])
colnames(diff_series) <- "Mid.Rets"
dim(diff_series)
head(diff_series)
dim(taq_data)
diff_series <- diff(diff_series)/diff(.index(diff_series))
blah <- diff(.index(diff_series))
class(blah)
head(blah)
tail(blah)
diff_series <- 0.5 * (taq_data[, "Bid.Price"] + taq_data[, "Ask.Price"])
colnames(diff_series) <- "Mid.Rets"
blah <- diff(.index(diff_series))
class(blah)
head(blah)
head(diff_series)
head(.index(diff_series))
head(index(diff_series))
length(index(diff_series))
diff_series <- 0.5 * (taq_data[, "Bid.Price"] + taq_data[, "Ask.Price"])
colnames(diff_series) <- "Mid.Rets"
diff_series <- diff(diff_series)/diff(index(diff_series))
diff_series <- 0.5 * (taq_data[, "Bid.Price"] + taq_data[, "Ask.Price"])
colnames(diff_series) <- "Mid.Rets"
blah <- diff(index(diff_series))
length(blah)
head(blah)
tail(blah)
max(blah)
min(blah)
blah <- diff(.index(diff_series))
max(blah)
min(blah)
diff_series <- 0.5 * (taq_data[, "Bid.Price"] + taq_data[, "Ask.Price"])
colnames(diff_series) <- "Mid.Rets"
diff_series <- diff(diff_series)/c(1, diff(.index(diff_series)))
head(diff_series)
tail(diff_series)
diff_series[1, ] <- 0
diff_series <- cbind(diff_series, taq_data[, "Volume"])
head(diff_series)
tail(diff_series)
ls()
dim(diff_series)
hist(diff_series[, 1], breaks=200, main="returns", xlab="", ylab="", freq=FALSE)
hist(diff_series[, 1], breaks=20, main="returns", xlab="", ylab="", freq=FALSE)
hist(diff_series[, 1], breaks=50, main="returns", xlab="", ylab="", freq=FALSE)
hist(diff_series[, 1], breaks=20, main="returns", xlab="", ylab="", freq=FALSE)
lines(density(diff_series[, 1]), col='red', lwd=1)
hist(diff_series[, 1], breaks=10, main="returns", xlab="", ylab="", freq=FALSE)
lines(density(diff_series[, 1]), col='red', lwd=1)
hist(diff_series[, 1], breaks=50, main="returns", xlab="", ylab="", freq=FALSE)
lines(density(diff_series[, 1]), col='red', lwd=1)
chartSeries(cumsum(diff_series[, 1])), theme=chartTheme("white"))
chartSeries(cumsum(diff_series[, 1]), theme=chartTheme("white"))
head(diff_series)
tail(diff_series)
options(digits=7)
tail(diff_series)
ohlc_data <- scrub_agg(taq_data=get(sym_bol))
chartSeries(ohlc_data, name=sym_bol, theme=chartTheme("white"))
head(ohlc_data)
head(taq_data)
diff_series <- diff(ohlc_data[, "mid_prices.Close"])
head(diff_series)
tail(diff_series)
diff_series[1, ] <- 0
colnames(diff_series) <- "diffs"
colnames(diff_series) <- "Mid.Rets"
hist(diff_series, breaks=200, main="returns", xlab="", ylab="", freq=FALSE)
hist(diff_series, breaks=100, main="returns", xlab="", ylab="", freq=FALSE)
hist(diff_series, breaks=50, main="returns", xlab="", ylab="", freq=FALSE)
lines(density(returns_scrub), col='red', lwd=1)  # draw density
lines(density(diff_series), col='red', lwd=1)  # draw density
options("digits")
options(digits=15)
head(taq_data)
options(digits=5)
head(taq_data)
options(digits=4)
head(taq_data)
options(digits=7)
sym_bols
dim(taq_data)
dim(ohlc_data)
head(ohlc_data)
ncol(ohlc_data)
options(digits=7)
ncol(taq_data)
library(HighFreq)
library(HighFreq)
blah <- calc_rets(taq_data=taq_data)
blah <- calc_rets(xts_data=taq_data)
taq_data <- scrub_TAQ(taq_data=get(sym_bol))
blah <- calc_rets(xts_data=taq_data)
hist(blah[, 1], breaks=200, main="returns", xlab="", ylab="", freq=FALSE)
hist(blah[, 1], breaks=50, main="returns", xlab="", ylab="", freq=FALSE)
ohlc_data <- scrub_agg(taq_data=get(sym_bol))
blah <- calc_rets(xts_data=ohlc_data)
hist(blah[, 1], breaks=50, main="returns", xlab="", ylab="", freq=FALSE)
library(HighFreq)
sym_bol
save_rets(sym_bol)
library(HighFreq)
save_rets(sym_bol)
#' Recursively \sQuote{\code{rbind}} a list of objects, such as \code{xts} time series.
save_rets <- function(sym_bol,
data_dir="E:/mktdata/sec/",
output_dir="E:/output/data/",
period="minutes") {
# create path to directory containing *.RData files
file_dir <- file.path(data_dir, sym_bol)
# get list of *.RData files
file_list <- list.files(file_dir)
# create paths to *.RData files
file_names <- file.path(file_dir, file_list)
# load TAQ data into list
data <- sapply(head(file_names), function(file_name) {
cat("loading", sym_bol, "frome file: ", file_name, "\n")
data_name <- load(file_name)
get(data_name)
})
# scrub and aggregate the TAQ data
data <- lapply(data, scrub_agg, period=period)
# calculate returns
data <- lapply(data, calc_rets)
# recursively "rbind" the list into a single xts
data <- do_call_rbind(data)
# assign column names, i.e. "symbol.High"
colnames(data) <- c(paste(sym_bol, "rets", sep="."), paste(sym_bol, "vol", sep="."))
# copy the xts data to a variable with the name 'sym_bol'
sym_bol_rets <- paste(sym_bol, "rets", sep=".")
assign(sym_bol_rets, data)
# save the xts data to a file in the output_dir
save(list=eval(sym_bol_rets), file=file.path(output_dir, paste0(sym_bol_rets, ".RData")))
invisible(sym_bol_rets)
}  # end save_rets
save_rets(sym_bol)
library(HighFreq)
save_rets <- function(sym_bol,
data_dir="E:/mktdata/sec/",
output_dir="E:/output/data/",
period="minutes") {
# create path to directory containing *.RData files
file_dir <- file.path(data_dir, sym_bol)
# get list of *.RData files
file_list <- list.files(file_dir)
# create paths to *.RData files
file_names <- file.path(file_dir, file_list)
# load TAQ data into list
data <- sapply(head(file_names), function(file_name) {
cat("loading", sym_bol, "frome file: ", file_name, "\n")
data_name <- load(file_name)
get(data_name)
})
# scrub and aggregate the TAQ data
data <- lapply(data, scrub_agg, period=period)
# calculate returns
data <- lapply(data, calc_rets)
# recursively "rbind" the list into a single xts
data <- do_call_rbind(data)
# assign column names, i.e. "symbol.High"
colnames(data) <- c(paste(sym_bol, "rets", sep="."), paste(sym_bol, "vol", sep="."))
# copy the xts data to a variable with the name 'sym_bol'
sym_bol_rets <- paste(sym_bol, "rets", sep=".")
assign(sym_bol_rets, data)
# save the xts data to a file in the output_dir
save(list=eval(sym_bol_rets), file=file.path(output_dir, paste0(sym_bol_rets, ".RData")))
invisible(sym_bol_rets)
}  # end save_rets
save_rets(sym_bol)
library(HighFreq)
save_rets(sym_bol)
library(HighFreq)
save_rets(sym_bol)
rm(save_rets)
library(HighFreq)
save_rets(sym_bol)
sapply(sym_bols, save_rets)
sapply(head(sym_bols), save_
