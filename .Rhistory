model_type=model_type,
flag_print=flag_print,
flag_plot=flag_plot
)  # end list
trading_params <- list(
symbol_s=symbol_s,
trading_levels=trading_levels,
flag_sticky_stops=flag_sticky_stops,
flag_print=flag_print,
flag_plot=flag_plot
)  # end list
start_date <- start(prices_ts_all)
end_date <- end(prices_ts_all)
prices_ts <- prices_ts_all[paste(start_date, end_date, sep="/")]
start_point <- which(start_date==index(prices_ts_all))
end_point <- which(end_date==index(prices_ts_all))
n_row <- (end_point - start_point) + 1
look_forward <- 2*22  # about twice monthly
look_back <- 252  # about one year
num_intervals <- n_row %/% look_forward
end_points <- n_row - num_intervals*look_forward + (0:num_intervals)*look_forward + start_point - 1
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
end_points <- index(prices_ts_all[end_points, ])
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
end_points
end_points <- index(prices_ts_all[end_points, ])
back_test <- t(roll_backtest(end_points=end_points[-NROW(end_points)],
look_forward=look_forward,
look_back=look_back,
train_model = train_model,
model_params = model_params,
trade_model = trade_model,
trading_params = trading_params,
price_s=prices_ts_all))
look_forward <- 6*22
num_intervals <- n_row %/% look_forward
num_intervals
end_points <- n_row - num_intervals*look_forward + (0:num_intervals)*look_forward + start_point - 1
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
end_points <- index(prices_ts_all[end_points, ])
back_test <- t(roll_backtest(end_points=end_points[-NROW(end_points)],
look_forward=look_forward,
look_back=look_back,
train_model = train_model,
model_params = model_params,
trade_model = trade_model,
trading_params = trading_params,
price_s=prices_ts_all))
back_test <- xts::xts(back_test, order.by=end_points[-NROW(end_points)])
back_test
foo <- back_test
back_test <- t(roll_backtest(end_points=end_points[-NROW(end_points)],
look_forward=look_forward,
look_back=look_back,
train_model = train_model,
model_params = model_params,
trade_model = trade_model,
trading_params = trading_params,
price_s=prices_ts))
back_test <- xts::xts(back_test, order.by=end_points[-NROW(end_points)])
identical(back_test, foo)
back_test_old <- back_test
roll_backtest <- function(x_ts,
train_func, trade_func,
look_back=look_forward,
look_forward,
end_points=rutils::calc_endpoints(x_ts, look_forward),
...) {
# match train and trade functions
train_func <- match.fun(train_func)
trade_func <- match.fun(trade_func)
# define back_points and fwd_points
# n_row <- NROW(x_ts)
back_points <- max(1, end_points - look_back + 1)
fwd_points <- min(NROW(x_ts), end_points + look_forward)
# perform backtest over length of end_points
back_test <- sapply(2:(NROW(end_points)-1), function(in_dex) {
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]],
...)
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]],
trained_model,
...)
})  # end sapply
# coerce back_test into matrix and transpose it
if (is.vector(back_test))
back_test <- t(back_test)
back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
look_forward
look_back
trade_model
back_test <- t(roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts))
rutils::calc_endpoints(prices_ts, look_forward)
ls()
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
back_points <- max(1, end_points - look_back + 1)
fwd_points <- min(NROW(x_ts), end_points + look_forward)
back_points
end_points - look_back + 1
roll_backtest <- function(x_ts,
train_func, trade_func,
look_back=look_forward,
look_forward,
end_points=rutils::calc_endpoints(x_ts, look_forward),
...) {
# match train and trade functions
train_func <- match.fun(train_func)
trade_func <- match.fun(trade_func)
# define back_points and fwd_points
# n_row <- NROW(x_ts)
back_points <- end_points - look_back + 1
back_points[back_points<1] <- 1
fwd_points <- end_points + look_forward
fwd_points[fwd_points>NROW(x_ts)] <- NROW(x_ts)
# perform backtest over length of end_points
back_test <- sapply(2:(NROW(end_points)-1), function(in_dex) {
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]],
...)
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]],
trained_model,
...)
})  # end sapply
# coerce back_test into matrix and transpose it
if (is.vector(back_test))
back_test <- t(back_test)
back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
back_test <- t(roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts))
debug(roll_backtest)
back_test <- t(roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts))
back_points
fwd_points
in_dex <- 2
back_points[in_dex]:end_points[in_dex]
(end_points[in_dex]+1):fwd_points[in_dex]
undebug(roll_backtest)
as.list(1:5)
as.numeric(as.list(1:5))
as.numeric(list(a=1, b=5))
unlist(list(a=1, b=5))
roll_backtest <- function(x_ts,
train_func, trade_func,
look_back=look_forward,
look_forward,
end_points=rutils::calc_endpoints(x_ts, look_forward),
...) {
# match train and trade functions
train_func <- match.fun(train_func)
trade_func <- match.fun(trade_func)
# define back_points and fwd_points
# n_row <- NROW(x_ts)
back_points <- end_points - look_back + 1
back_points[back_points<1] <- 1
fwd_points <- end_points + look_forward
fwd_points[fwd_points>NROW(x_ts)] <- NROW(x_ts)
# perform backtest over length of end_points
back_test <- sapply(2:(NROW(end_points)-1), function(in_dex) {
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]],
...)
unlist(trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]],
trained_model, ...))
})  # end sapply
# coerce back_test into matrix and transpose it
if (is.vector(back_test))
back_test <- t(back_test)
back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
back_test <- t(roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts))
back_test <- t(roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts))
debug(roll_backtest)
back_test <- t(roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts))
in_dex <- 2
ls()
str(train_func)
train_func <- train_model
trade_func <- trade_model
model_params <- list(
symbol_s=symbol_s,
model_type=model_type,
flag_print=flag_print,
flag_plot=flag_plot
)  # end list
symbol_s
trading_params
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]], model_params = model_params)
trained_model
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]], trained_model, trading_params = trading_params))
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]], trained_model, trading_params = trading_params)
unlist(trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]], trained_model, trading_params = trading_params))
unlist(trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]], trained_model, trading_params = trading_params)[[-1]])
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]], trained_model, trading_params = trading_params)[-1]
calibrated_model <- train_model(time_series = prices_ts,
model_params = model_params)
trade_output <- trade_model(time_series = prices_ts,
calibrated_model = calibrated_model,
trading_params = trading_params)
trade_output
trade_output[1:2]
trade_output[1]
unlist(trade_output[1])
unlist(trade_output[3])
unlist(trade_output[1])
roll_backtest <- function(x_ts,
train_func, trade_func,
look_back=look_forward,
look_forward,
end_points=rutils::calc_endpoints(x_ts, look_forward),
...) {
# match train and trade functions
train_func <- match.fun(train_func)
trade_func <- match.fun(trade_func)
# define back_points and fwd_points
# n_row <- NROW(x_ts)
back_points <- end_points - look_back + 1
back_points[back_points<1] <- 1
fwd_points <- end_points + look_forward
fwd_points[fwd_points>NROW(x_ts)] <- NROW(x_ts)
# perform backtest over length of end_points
back_test <- sapply(2:(NROW(end_points)-1), function(in_dex) {
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]],
...)
unlist(trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]],
trained_model, ...)[1])
})  # end sapply
# coerce back_test into matrix and transpose it
if (is.vector(back_test))
back_test <- t(back_test)
back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
back_test <- t(roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts))
back_test
back_test <- roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test
source("C:/Develop/R/scripts/stat_arb_func_2017_09_12.R")
roll_backtest <- function(x_ts,
train_func, trade_func,
look_back=look_forward,
look_forward,
end_points=rutils::calc_endpoints(x_ts, look_forward),
...) {
# match train and trade functions
train_func <- match.fun(train_func)
trade_func <- match.fun(trade_func)
# define back_points and fwd_points
# n_row <- NROW(x_ts)
back_points <- end_points - look_back + 1
back_points[back_points<1] <- 1
fwd_points <- end_points + look_forward
fwd_points[fwd_points>NROW(x_ts)] <- NROW(x_ts)
# perform backtest over length of end_points
back_test <- sapply(2:(NROW(end_points)-1), function(in_dex) {
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]],
...)
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]],
trained_model, ...)
})  # end sapply
# coerce back_test into matrix and transpose it
if (is.vector(back_test))
back_test <- t(back_test)
back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
all.equal(back_test_old, back_test)
all.equal(foo, back_test)
back_test
back_test_old <- back_test
back_test <- roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
look_forward
trade_output <- trade_model(time_series = prices_ts,
calibrated_model = calibrated_model,
trading_params = trading_params)
source("C:/Develop/R/scripts/stat_arb_func_2017_09_12.R")
roll_backtest <- function(x_ts,
train_func, trade_func,
look_back=look_forward,
look_forward,
end_points=rutils::calc_endpoints(x_ts, look_forward),
...) {
# match train and trade functions
train_func <- match.fun(train_func)
trade_func <- match.fun(trade_func)
# define back_points and fwd_points
# n_row <- NROW(x_ts)
back_points <- end_points - look_back + 1
back_points[back_points<1] <- 1
fwd_points <- end_points + look_forward
fwd_points[fwd_points>NROW(x_ts)] <- NROW(x_ts)
# perform backtest over length of end_points
back_test <- sapply(2:(NROW(end_points)-1), function(in_dex) {
trained_model <- train_func(x_ts[back_points[in_dex]:end_points[in_dex]],
...)
trade_func(x_ts[(end_points[in_dex]+1):fwd_points[in_dex]],
trained_model, ...)
})  # end sapply
# coerce back_test into matrix and transpose it
if (is.vector(back_test))
back_test <- t(back_test)
back_test <- t(back_test)
# coerce back_test into xts series
xts(back_test, order.by=index(x_ts[end_points[2:(NROW(end_points)-1)]]))
}
back_test <- roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test
end_points
is.numeric(end_points)
is.numeric(Sys.Date() + 1:5)
Sys.Date() + 1:5
end_points
rutils::calc_endpoints(prices_ts, look_forward)
index(prices_ts[end_points, ])
identical(x_ts, prices_ts)
x_ts <- prices_ts
identical(x_ts, prices_ts)
end_points <- index(prices_ts[end_points, ])
which(end_points==index(x_ts))
end_points
match(end_points==index(x_ts))
match(end_points, index(x_ts))
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
end_points
prices_ts[0, ]
library(HighFreq)
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
end_points <- index(prices_ts[end_points, ])
end_points
end_points <- c(start(prices_ts), end_points)
end_points
back_test <- roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test_old <- back_test
back_test <- HighFreq::roll_backtest(end_points=end_points,
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
library(HighFreq)
library(HighFreq)
library(HighFreq)
source("C:/Develop/R/scripts/stat_arb_func_2017_09_12.R")
prices_ts_all <- xts::as.xts(zoo::read.zoo(
file=file.path("C:/Develop/data",
"data prices close 2017-08-31.csv"),
header=TRUE, sep=",", FUN=as.Date, format="%m/%d/%Y"))
prices_ts_all <- prices_ts_all[, -which("XLR"==colnames(prices_ts_all))]
sum(is.na(prices_ts_all))
start_date <- start(prices_ts_all)
end_date <- end(prices_ts_all)
prices_ts <- prices_ts_all[paste(start_date, end_date, sep="/")]
prices_ts <- cbind(1:NROW(prices_ts), prices_ts)
colnames(prices_ts)[1] <- "index"
symbol_s <- c("XLP", "XLU")
model_type <- 1 # 0: OLS crossing the origin, 1: (default) ols, 2: TLS, 3: no-drift index, 4: no-drift dates
flag_sticky_stops <- TRUE  # use sticky stops, FALSE use regular stops
flag_print <- FALSE
flag_plot <- FALSE
trading_levels <- list(z_long_enter = -1.5,
z_long_profit = 0,
z_long_stop = -2.5,
z_short_enter = 1.5,
z_short_profit = 0,
z_short_stop = 2.5)
model_params <- list(
symbol_s=symbol_s,
model_type=model_type,
flag_print=flag_print,
flag_plot=flag_plot
)  # end list
trading_params <- list(
symbol_s=symbol_s,
trading_levels=trading_levels,
flag_sticky_stops=flag_sticky_stops,
flag_print=flag_print,
flag_plot=flag_plot
)  # end list
start_date <- start(prices_ts_all)
end_date <- end(prices_ts_all)
prices_ts <- prices_ts_all[paste(start_date, end_date, sep="/")]
start_point <- which(start_date==index(prices_ts_all))
end_point <- which(end_date==index(prices_ts_all))
look_forward <- 22
look_back <- 252  # about one year
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
back_test <- HighFreq::roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test
look_forward <- 2*22  # about twice monthly
end_points <- rutils::calc_endpoints(prices_ts, look_forward)
back_test <- HighFreq::roll_backtest(end_points=rutils::calc_endpoints(prices_ts, look_forward),
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
back_test_old <- back_test
end_points
end_points <- index(prices_ts[end_points, ])
end_points <- c(start(prices_ts), end_points)
end_points
back_test <- HighFreq::roll_backtest(end_points=end_points,
look_forward=look_forward,
look_back=look_back,
train_func = train_model,
trade_func = trade_model,
model_params = model_params,
trading_params = trading_params,
x_ts=prices_ts)
all.equal(back_test_old, back_test)
end_points
library(HighFreq)
?HighFreq::roll_backtest
library(HighFreq)
?HighFreq::roll_backtest
library(HighFreq)
?HighFreq::roll_backtest
library(HighFreq)
library(HighFreq)
