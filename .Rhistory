colnames(pnl_s) <- "SPY static betas"
last(pnl_s)
bench_mark <- cbind(exp(cumsum(returns_running[index(pnl_s)]))-1, pnl_s)[endpoints(pnl_s, on="days")]
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
ls()
optim_highfreq_dual <- op_tim
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
pnl_s <- position_s*re_turns
be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
exp(sum(pnl_s) - be_ta * sum(re_turns))
# -(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
}  # end cum_pnl
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
pnl_s <- position_s*re_turns
be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
exp(sum(pnl_s) - be_ta * sum(re_turns))
# -(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
}  # end cum_pnl
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
pnl_s <- position_s*re_turns
be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
exp((sum(pnl_s) - 1) - be_ta * (sum(re_turns) - 1))
# -(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
}  # end cum_pnl
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
pnl_s <- position_s*re_turns
be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
-exp((sum(pnl_s) - 1) - be_ta * (sum(re_turns) - 1))
# -(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
}  # end cum_pnl
op_tim <- DEoptim::DEoptim(fn=cum_pnl,
upper=rep(200, 2*NCOL(SPY_design)),
lower=rep(-200, 2*NCOL(SPY_design)),
de_sign=SPY_design[index(oh_lc)],
re_turns=returns_running[index(oh_lc)],
control=list(trace=FALSE, itermax=100, parallelType=1, packages="rutils"))
x11()
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
beta_s <- op_tim$optim$bestmem
names(beta_s) <- c(paste0(colnames(SPY_design), "_long"), paste0(colnames(SPY_design), "_short"))
position_s <- rep.int(NA, NROW(SPY_design))
position_s[1] <- 0
weight_s <- SPY_design %*% beta_s[1:NCOL(SPY_design)]
position_s[weight_s < -1] <- 1.0
position_s[abs(weight_s) < 0.1] <- 0.0
weight_s <- SPY_design %*% beta_s[(NCOL(SPY_design)+1):(2*NCOL(SPY_design))]
position_s[weight_s > 1] <- -1.0
position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
position_s <- rutils::lag_it(position_s)
pnl_s <- exp(cumsum((position_s * returns_running)))-1
colnames(pnl_s) <- "SPY static betas"
last(pnl_s)
x11()
bench_mark <- cbind(exp(cumsum(returns_running[index(pnl_s)]))-1, pnl_s)[endpoints(pnl_s, on="days")]
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
pnl_s <- position_s*re_turns
be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
be_ta
-exp((sum(pnl_s) - 1) - be_ta * (sum(re_turns) - 1))
ls()
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
# pnl_s <- position_s*re_turns
# be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
# -exp((sum(pnl_s) - 1) - be_ta * (sum(re_turns) - 1))
-(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
}  # end cum_pnl
cum_pnl(beta_s=beta_s, de_sign=SPY_design[index(oh_lc)],
re_turns=returns_running[index(oh_lc)])
op_tim <- DEoptim::DEoptim(fn=cum_pnl,
upper=rep(200, 2*NCOL(SPY_design)),
lower=rep(-200, 2*NCOL(SPY_design)),
de_sign=SPY_design[index(oh_lc)],
re_turns=returns_running[index(oh_lc)],
control=list(trace=FALSE, itermax=100, parallelType=1, packages="rutils"))
beta_s <- op_tim$optim$bestmem
names(beta_s) <- c(paste0(colnames(SPY_design), "_long"), paste0(colnames(SPY_design), "_short"))
beta_s
cum_pnl
position_s <- rep.int(NA, NROW(SPY_design))
position_s[1] <- 0
weight_s <- SPY_design %*% beta_s[1:NCOL(SPY_design)]
position_s[weight_s < -1] <- 1.0
position_s[abs(weight_s) < 0.1] <- 0.0
weight_s <- SPY_design %*% beta_s[(NCOL(SPY_design)+1):(2*NCOL(SPY_design))]
position_s[weight_s > 1] <- -1.0
position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
position_s <- rutils::lag_it(position_s)
pnl_s <- exp(cumsum((position_s * returns_running)))-1
colnames(pnl_s) <- "SPY static betas"
last(pnl_s)
sum(abs(rutils::diff_it(position_s))) / 2 / NROW(endpoints(SPY_design, on="days"))
2*NROW(position_s) / sum(abs(rutils::diff_it(position_s)))
bench_mark <- cbind(exp(cumsum(returns_running[index(pnl_s)]))-1, pnl_s)[endpoints(pnl_s, on="days")]
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
beta_s
optim_highfreq_dual$optim$bestmem
ls()
optim_highfreq_go_flat <- op_tim
save(list=ls(pattern=glob2rx("op*")), file="C:/Develop/data/static_betas.Rdata")
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
pnl_s <- position_s*re_turns
be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
-(exp(sum(pnl_s) - be_ta * sum(re_turns)) - 1)
# -(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
}  # end cum_pnl
op_tim <- DEoptim::DEoptim(fn=cum_pnl,
upper=rep(200, 2*NCOL(SPY_design)),
lower=rep(-200, 2*NCOL(SPY_design)),
de_sign=SPY_design[index(oh_lc)],
re_turns=returns_running[index(oh_lc)],
control=list(trace=FALSE, itermax=100, parallelType=1, packages="rutils"))
beta_s <- op_tim$optim$bestmem
names(beta_s) <- c(paste0(colnames(SPY_design), "_long"), paste0(colnames(SPY_design), "_short"))
position_s <- rep.int(NA, NROW(SPY_design))
position_s[1] <- 0
weight_s <- SPY_design %*% beta_s[1:NCOL(SPY_design)]
position_s[weight_s < -1] <- 1.0
position_s[abs(weight_s) < 0.1] <- 0.0
weight_s <- SPY_design %*% beta_s[(NCOL(SPY_design)+1):(2*NCOL(SPY_design))]
position_s[weight_s > 1] <- -1.0
position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
position_s <- rutils::lag_it(position_s)
pnl_s <- exp(cumsum((position_s * returns_running)))-1
colnames(pnl_s) <- "SPY static betas"
last(pnl_s)
sum(abs(rutils::diff_it(position_s))) / 2 / NROW(endpoints(SPY_design, on="days"))
2*NROW(position_s) / sum(abs(rutils::diff_it(position_s)))
bench_mark <- cbind(exp(cumsum(returns_running[index(pnl_s)]))-1, pnl_s)[endpoints(pnl_s, on="days")]
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
beta_s
tail(SPY_design)
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
# pnl_s <- position_s*re_turns
# be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
# -(exp(sum(pnl_s) - be_ta * sum(re_turns)) - 1)
-(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
}  # end cum_pnl
cum_pnl(beta_s=beta_s, de_sign=SPY_design[index(oh_lc)],
re_turns=returns_running[index(oh_lc)])
foo <- lapply(c("2008", "2009", "2010", "2011", "2012", "2013", "2014"),
function(year) DEoptim::DEoptim(fn=cum_pnl,
upper=rep(200, 2*NCOL(SPY_design)),
lower=rep(-200, 2*NCOL(SPY_design)),
de_sign=SPY_design[year],
re_turns=returns_running[year],
control=list(trace=FALSE, itermax=100, parallelType=1, packages="rutils"))
)  # end lapply
optim_annual <- foo
ls(pattern=glob2rx("op*"))
save(list=ls(pattern=glob2rx("op*")), file="C:/Develop/data/static_betas.Rdata")
summary(optim_annual[[1]])
summary(optim_annual[[2]])
betas_annual <- sapply(optim_annual, function(op_tim) op_tim$optim$bestmem
)  # end sapply
dim(betas_annual)
betas_annual <- t(betas_annual)
colnames(betas_annual) <- c(paste0(colnames(SPY_design), "_long"), paste0(colnames(SPY_design), "_short"))
betas_annual
dim(betas_annual)
NROW(optim_annual)
rownames(betas_annual) <- c("2008", "2009", "2010", "2011", "2012", "2013", "2014")
betas_annual
betas_annual[, 1:4]
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
# pnl_s <- position_s*re_turns
# be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
# -(exp(sum(pnl_s) - be_ta * sum(re_turns)) - 1)
# -(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
}  # end cum_pnl
year_s <- c("2008", "2009", "2010", "2011", "2012", "2013", "2014")
year_s <- c("2008", "2009", "2010", "2011", "2012", "2013", "2014")
betas_annual["2008", ]
betas_annual["2009", ]
betas_annual <- lapply(year_s, function(year)
cum_pnl(beta_s=betas_annual[year, ],
de_sign=SPY_design[year],
re_turns=returns_running[year])
)  # end lapply
betas_annual <- sapply(optim_annual, function(op_tim) op_tim$optim$bestmem
)  # end sapply
betas_annual <- t(betas_annual)
colnames(betas_annual) <- c(paste0(colnames(SPY_design), "_long"), paste0(colnames(SPY_design), "_short"))
rownames(betas_annual) <- year_s
foo <- lapply(year_s, function(year)
cum_pnl(beta_s=betas_annual[year, ],
de_sign=SPY_design[year],
re_turns=returns_running[year])
)  # end lapply
foo <- rutils::do_call(rbind, foo)
foo <- lapply(year_s, function(year)
cum_pnl(beta_s=betas_annual[year, ],
de_sign=SPY_design[year],
re_turns=returns_running[year])
)  # end lapply
head(foo[[1]])
NROW(foo[[1]])
NROW(foo[[2]])
NROW(returns_running)
cum_pnl <- function(beta_s, de_sign=SPY_design, re_turns=returns_running) {
n_col <- NCOL(de_sign)
position_s <- rep.int(NA, NROW(de_sign))
position_s[1] <- 0
# long signal
weight_s <- de_sign %*% beta_s[1:n_col]
position_s[weight_s < -1] <- 1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
# short signal
weight_s <- de_sign %*% beta_s[(n_col+1):(2*n_col)]
position_s[weight_s > 1] <- -1.0
# position_s[abs(weight_s) < 0.1] <- 0.0
position_s <- zoo::na.locf(position_s)
# position_s <- rutils::lag_it(position_s)
position_s <- c(0, position_s[-NROW(position_s)])
# total PnL
# -exp(sum(position_s*re_turns))
# average PnL per trade
# pnl_s <- position_s*re_turns
# be_ta <- (sum(pnl_s * re_turns) - sum(pnl_s) * sum(re_turns)) / (sum(pnl_s * pnl_s) - sum(pnl_s)^2 )
# -(exp(sum(pnl_s) - be_ta * sum(re_turns)) - 1)
# -(exp(sum(position_s*re_turns))-1) # /(sum(abs(rutils::diff_it(position_s))) / 2/ 1e5)
position_s*re_turns
}  # end cum_pnl
save(list=ls(pattern=glob2rx("op*")), file="C:/Develop/data/static_betas.Rdata")
foo <- lapply(year_s, function(year)
cum_pnl(beta_s=betas_annual[year, ],
de_sign=SPY_design[year],
re_turns=returns_running[year])
)  # end lapply
head(foo[[1]])
tail(foo[[1]])
head(foo[[2]])
pnl_s <- rutils::do_call(rbind, foo)
dim(pnl_s)
dim(SPY_design)
bench_mark <- cbind(exp(cumsum(returns_running[index(pnl_s)]))-1, pnl_s)[endpoints(pnl_s, on="days")]
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
pnl_s <- exp(cumsum(pnl_s))
colnames(pnl_s) <- "backtest"
bench_mark <- cbind(exp(cumsum(returns_running[index(pnl_s)]))-1, pnl_s)[endpoints(pnl_s, on="days")]
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
seq_along(year_s)
pnl_s <- lapply(seq_along(year_s), function(year) {
year1 <- year_s[year]
de_sign <- SPY_design[year1]
re_turns <- returns_running[year1]
year_s <- year_s[-year]
pnl_s <- lapply(year_s, function(year2)
cum_pnl(beta_s=betas_annual[year2, ],
de_sign=de_sign,
re_turns=re_turns)
)  # end lapply
pnl_s <- rutils::do_call(cbind, pnl_s)
rowSums(pnl_s)/NCOL(pnl_s)
})  # end lapply
dim(pnl_s)
NROW(pnl_s)
class(pnl_s[[2]])
NROW(pnl_s[[2]])
foo <- pnl_s
pnl_s <- rutils::do_call(rbind, pnl_s)
pnl_s <- rutils::do_call(c, pnl_s)
pnl_s <- exp(cumsum(pnl_s))
NROW(pnl_s)
NROW(SPY_design)
pnl_s <- xts(pnl_s, order.by=index(SPY_design))
colnames(pnl_s) <- "SPY static betas"
bench_mark <- cbind(exp(cumsum(returns_running[index(pnl_s)]))-1, pnl_s)[endpoints(pnl_s, on="days")]
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
pnl_s <- lapply(seq_along(year_s), function(year) {
year1 <- year_s[year]
de_sign <- SPY_design[year1]
re_turns <- returns_running[year1]
# loop over out-of-sample betas
# cum_pnl returns the vector (position_s*re_turns)
pnl_s <- lapply(year_s[-year], function(year2)
cum_pnl(beta_s=betas_annual[year2, ],
de_sign=de_sign,
re_turns=re_turns)
)  # end lapply
# calculate average over out-of-sample pnl_s
pnl_s <- rutils::do_call(cbind, pnl_s)
rowSums(pnl_s)/NCOL(pnl_s)
})  # end lapply
pnl_s <- rutils::do_call(c, pnl_s)
pnl_s <- exp(cumsum(pnl_s)) - 1
pnl_s <- xts(pnl_s, order.by=index(SPY_design))
colnames(pnl_s) <- "SPY static betas"
bench_mark <- cbind(exp(cumsum(returns_running[index(pnl_s)]))-1, pnl_s)[endpoints(pnl_s, on="days")]
chart_Series(bench_mark, theme=plot_theme,
name="Backtest of static beta strategy for SPY")
legend("topleft", legend=colnames(bench_mark),
inset=0.1, bg="white", lty=c(1, 1), lwd=c(6, 6),
col=plot_theme$col$line.col, bty="n")
year_s[-3]
year_s[-"2011"]
getwd()
Sys.glob("*.Rnw")
Sys.glob("*.Rnw")
Sys.glob("C:/Develop/R/lecture_slides/*.Rnw")
file_names <- Sys.glob("C:/Develop/R/lecture_slides/*.Rnw")
file_names
grep("FRE", file_names)
file_names <- file_names[-grep("FRE", file_names)]
file_names
setwd("C:/Develop/R/lecture_slides")
getwd()
sapply(file_names, knitr::knit2pdf)
sapply(file_names, knitr::purl, documentation=0)
ls()
ls(pattern=glob2rx("op*"))
save(list=ls(pattern=glob2rx("op*")), file="C:/Develop/data/static_betas.Rdata")
optim_multi_annual <- lapply(seq_along(year_s), function(year) {
year_s <- year_s[-year]
de_sign <- SPY_design[year_s]
re_turns <- returns_running[year_s]
DEoptim::DEoptim(fn=cum_pnl,
upper=rep(200, 2*NCOL(SPY_design)),
lower=rep(-200, 2*NCOL(SPY_design)),
de_sign=de_sign,
re_turns=re_turns,
control=list(trace=FALSE, itermax=100, parallelType=1, packages="rutils"))
})  # end lapply
year_s
year
year_s <- year_s[-2]
year
year_s
de_sign <- SPY_design[year_s]
re_turns <- returns_running[year_s]
tail(re_turns)
head(re_turns)
dim(re_turns)
dim(returns_running)
foo <- DEoptim::DEoptim(fn=cum_pnl,
upper=rep(200, 2*NCOL(SPY_design)),
lower=rep(-200, 2*NCOL(SPY_design)),
de_sign=de_sign,
re_turns=re_turns,
control=list(trace=FALSE, itermax=100, parallelType=1, packages="rutils"))
cum_pnl
