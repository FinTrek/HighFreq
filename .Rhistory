eigen_val <- ei_gen$values[1:max_eigen]
in_verse <- eigen_vec %*% (t(eigen_vec) / eigen_val)
# Apply shrinkage to the mean returns
col_means <- colMeans(ex_cess)
col_means <- ((1-al_pha)*col_means + al_pha*mean(col_means))
# Calculate weights using R
weight_s <- in_verse %*% col_means
weight_s <- weight_s/sum(weight_s)
# subset the re_turns to out-of-sample returns
re_turns <- re_turns[(end_points[i-1]+1):end_points[i], ]
# calculate the out-of-sample portfolio returns
xts(re_turns %*% weight_s, index(re_turns))
}  # end anonymous function
)  # end lapply
strat_rets <- rutils::do_call(rbind, strat_rets)
colnames(strat_rets) <- "strat_rets"
dygraphs::dygraph(cumsum(strat_rets),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
al_pha <- 0.0
max_eigen <- 2
strat_rets <- lapply(2:NROW(end_points),
function(i) {
# subset the ex_cess returns
ex_cess <- ex_cess[start_points[i-1]:end_points[i-1], ]
ei_gen <- eigen(cov(ex_cess))
# Calculate regularized inverse of covariance matrix
max_eigen <- 3
eigen_vec <- ei_gen$vectors[, 1:max_eigen]
eigen_val <- ei_gen$values[1:max_eigen]
in_verse <- eigen_vec %*% (t(eigen_vec) / eigen_val)
# Apply shrinkage to the mean returns
col_means <- colMeans(ex_cess)
col_means <- ((1-al_pha)*col_means + al_pha*mean(col_means))
# Calculate weights using R
weight_s <- in_verse %*% col_means
weight_s <- weight_s/sum(weight_s)
# subset the re_turns to out-of-sample returns
re_turns <- re_turns[(end_points[i-1]+1):end_points[i], ]
# calculate the out-of-sample portfolio returns
xts(re_turns %*% weight_s, index(re_turns))
}  # end anonymous function
)  # end lapply
# Flatten the list of xts into a single xts series
strat_rets <- rutils::do_call(rbind, strat_rets)
colnames(strat_rets) <- "strat_rets"
dygraphs::dygraph(cumsum(strat_rets),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
re_turns <- rutils::diff_it(log(price_s))
ex_cess <- re_turns - risk_free
max_eigen
strat_rets <- lapply(2:NROW(end_points),
function(i) {
# subset the ex_cess returns
ex_cess <- ex_cess[start_points[i-1]:end_points[i-1], ]
ei_gen <- eigen(cov(ex_cess))
# Calculate regularized inverse of covariance matrix
max_eigen <- 3
eigen_vec <- ei_gen$vectors[, 1:max_eigen]
eigen_val <- ei_gen$values[1:max_eigen]
in_verse <- eigen_vec %*% (t(eigen_vec) / eigen_val)
# Apply shrinkage to the mean returns
col_means <- colMeans(ex_cess)
col_means <- ((1-al_pha)*col_means + al_pha*mean(col_means))
# Calculate weights using R
weight_s <- in_verse %*% col_means
weight_s <- weight_s/sum(weight_s)
# subset the re_turns to out-of-sample returns
re_turns <- re_turns[(end_points[i-1]+1):end_points[i], ]
# calculate the out-of-sample portfolio returns
xts(re_turns %*% weight_s, index(re_turns))
}  # end anonymous function
)  # end lapply
strat_rets <- rutils::do_call(rbind, strat_rets)
colnames(strat_rets) <- "strat_rets"
dygraphs::dygraph(cumsum(strat_rets),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
sym_bols <- colnames(rutils::env_etf$price_s)
sym_bols <- sym_bols[!(sym_bols=="VXX")]
price_s <- rutils::env_etf$price_s[, sym_bols]
price_s <- zoo::na.locf(price_s)
price_s <- na.omit(price_s)
re_turns <- rutils::diff_it(price_s)
ei_gen <- eigen(cov(re_turns))
max_eigen <- 3
eigen_vec <- ei_gen$vectors[, 1:max_eigen]
eigen_val <- ei_gen$values[1:max_eigen]
in_verse <- eigen_vec %*% (t(eigen_vec) / eigen_val)
Define the shrinkage intensity
al_pha <- 0.5
col_means <- colMeans(re_turns)
col_means <- ((1-al_pha)*col_means + al_pha*mean(col_means))
weight_s <- in_verse %*% col_means
weights_r <- drop(weight_s/sum(weight_s))
weight_s <- drop(HighFreq::calc_weights(re_turns, max_eigen, al_pha=al_pha))
all.equal(weight_s, weights_r)
foo <- HighFreq::roll_portf(ex_cess, re_turns, start_points, end_points, al_pha, max_eigen)
class(ex_cess)
foo <- HighFreq::roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, al_pha, max_eigen)
library(HighFreq)
foo <- HighFreq::roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, al_pha, max_eigen)
rm(calc_weights)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, max_eigen, al_pha)
dim(ex_cess)
price_s <- rutils::env_etf$price_s[, sym_bols]
price_s <- zoo::na.locf(price_s)
price_s <- na.omit(price_s)
re_turns <- rutils::diff_it(price_s)
ex_cess <- re_turns - risk_free
sum(is.na(ex_cess))
end_points <- rutils::calc_endpoints(re_turns, inter_val="months")
end_points <- end_points[end_points>50]
len_gth <- NROW(end_points)
al_pha <- 0.5
max_eigen <- 3
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, max_eigen, al_pha)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, max_eigen, al_pha)
head(foo)
tail(foo)
dim(foo)
dim(re_turns)
sym_bols
end_points <- rutils::calc_endpoints(re_turns, inter_val="months")
end_points <- end_points[end_points>50]
len_gth <- NROW(end_points)
look_back <- 12
start_points <- c(rep_len(1, look_back-1), end_points[1:(len_gth-look_back+1)])
NROW(start_points)
NROW(end_points)
rm(roll_portf)
Rcpp::sourceCpp(file="C:/Develop/R/lecture_slides/assignments/rcpp_test6.cpp")
strat_rets_arma <- roll_portf(ex_cess,
re_turns,
start_points-1,
end_points-1,
al_pha=al_pha,
max_eigen=max_eigen)
rm(roll_portf)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, max_eigen, al_pha)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, max_eigen, al_pha)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, max_eigen, al_pha)
tail(foo)
head(foo)
foo <- roll_portf(ex_cess, re_turns, start_points, end_points, max_eigen, al_pha)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
foo <- roll_portf(ex_cess, re_turns, start_points, end_points, max_eigen, al_pha)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
foo <- roll_portf(ex_cess, re_turns, start_points, end_points, max_eigen, al_pha)
dim(foo)
dim(re_turns)
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points-1, end_points-1, max_eigen, al_pha)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_portf.cpp")
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points-1, end_points-1, max_eigen, al_pha)
all.equal(strat_rets, strat_rets)
all.equal(strat_rets, foo)
tail(strat_rets)
tail(foo)
dim(strat_rets)
dim(foo)
head(strat_rets)
head(foo)
strat_rets <- lapply(2:NROW(end_points),
function(i) {
# subset the ex_cess returns
ex_cess <- ex_cess[start_points[i-1]:end_points[i-1], ]
# apply regularized inverse to mean of ex_cess
weight_s <- HighFreq::calc_weights(ex_cess, max_eigen, al_pha)
# subset the re_turns to out-of-sample returns
re_turns <- re_turns[(end_points[i-1]+1):end_points[i], ]
# calculate the out-of-sample portfolio returns
xts(re_turns %*% weight_s, index(re_turns))
}  # end anonymous function
)  # end lapply
strat_rets <- rutils::do_call(rbind, strat_rets)
colnames(strat_rets) <- "strat_rets"
all.equal(strat_rets, foo)
dim(re_turns)
dim(foo)
dim(strat_rets)
head(strat_rets)
head(re_turns[, 1:3])
head(end_points)
head(start_points)
head(start_points, 13)
strat_rets <- lapply(2:NROW(end_points),
function(i) {
# subset the ex_cess returns
ex_cess <- ex_cess[start_points[i-1]:end_points[i-1], ]
# apply regularized inverse to mean of ex_cess
weight_s <- HighFreq::calc_weights(ex_cess, max_eigen, al_pha)
# subset the re_turns to out-of-sample returns
re_turns <- re_turns[(end_points[i-1]+1):end_points[i], ]
# calculate the out-of-sample portfolio returns
xts(re_turns %*% weight_s, index(re_turns))
}  # end anonymous function
)  # end lapply
strat_rets <- rutils::do_call(rbind, strat_rets)
colnames(strat_rets) <- "strat_rets"
foo <- roll_portf(coredata(ex_cess), coredata(re_turns), start_points-1, end_points-1, max_eigen, al_pha)
tail(strat_rets)
tail(foo)
library(HighFreq)
foo <- HighFreq::roll_portf(coredata(ex_cess), coredata(re_turns), start_points, end_points, max_eigen, al_pha)
foo <- HighFreq::roll_portf(coredata(ex_cess), coredata(re_turns), start_points-1, end_points-1, max_eigen, al_pha)
foo <- xts(foo, index(re_turns))
all.equal(strat_rets, foo[index(strat_rets)])
class(strat_rets)
colnames(foo) <- "strat_rets"
all.equal(strat_rets, foo[index(strat_rets)])
dygraphs::dygraph(cumsum(foo),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
roll_rets_R <- lapply(2:NROW(end_points),
function(i) {
# subset the ex_cess returns
ex_cess <- ex_cess[start_points[i-1]:end_points[i-1], ]
ei_gen <- eigen(cov(ex_cess))
# Calculate regularized inverse of covariance matrix
max_eigen <- 3
eigen_vec <- ei_gen$vectors[, 1:max_eigen]
eigen_val <- ei_gen$values[1:max_eigen]
in_verse <- eigen_vec %*% (t(eigen_vec) / eigen_val)
# Apply shrinkage to the mean returns
col_means <- colMeans(ex_cess)
col_means <- ((1-al_pha)*col_means + al_pha*mean(col_means))
# Calculate weights using R
weight_s <- in_verse %*% col_means
weight_s <- weight_s/sum(weight_s)
# subset the re_turns to out-of-sample returns
re_turns <- re_turns[(end_points[i-1]+1):end_points[i], ]
# calculate the out-of-sample portfolio returns
xts(re_turns %*% weight_s, index(re_turns))
}  # end anonymous function
)  # end lapply
roll_rets_R <- rutils::do_call(rbind, roll_rets_R)
colnames(roll_rets_R) <- "strat_rets"
roll_rets <- lapply(2:NROW(end_points), function(i) {
# subset the ex_cess returns
ex_cess <- ex_cess[start_points[i-1]:end_points[i-1], ]
# apply regularized inverse to mean of ex_cess
weight_s <- HighFreq::calc_weights(ex_cess, max_eigen, al_pha)
# subset the re_turns to out-of-sample returns
re_turns <- re_turns[(end_points[i-1]+1):end_points[i], ]
# calculate the out-of-sample portfolio returns
xts(re_turns %*% weight_s, index(re_turns))
}  # end anonymous function
)  # end lapply
roll_rets <- rutils::do_call(rbind, roll_rets)
colnames(roll_rets) <- "roll_rets"
all.equal(roll_rets, roll_rets_R)
colnames(roll_rets_R) <- "roll_rets"
all.equal(roll_rets, roll_rets_R)
roll_rets_arma <- roll_rets
all.equal(roll_rets_arma, roll_rets_R)
roll_rets <- HighFreq::roll_portf(coredata(ex_cess),
coredata(re_turns),
start_points-1, end_points-1,
max_eigen, al_pha)
roll_rets <- xts(roll_rets, index(re_turns))
colnames(roll_rets) <- "roll_rets"
all.equal(roll_rets_arma, roll_rets[index(roll_rets_arma)])
dygraphs::dygraph(cumsum(roll_rets),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
bar <- foo
foo <- HighFreq::roll_portf(ex_cess, re_turns, start_points-1, end_points-1, max_eigen, al_pha)
foo <- xts(foo, index(re_turns))
colnames(foo) <- "strat_rets"
all.equal(foo, bar)
library(HighFreq)
len_gth <- 100
n_var <- 5
de_sign <- matrix(rnorm(n_var*len_gth), nc=n_var)
noise <- rnorm(len_gth, sd=0.5)
weight_s <- rnorm(n_var)
res_ponse <- -3 + de_sign %*% weight_s + noise
reg_model <- lm(res_ponse ~ de_sign)
sum_mary <- summary(reg_model)
reg_model_arma <- lm_arma(res_ponse=res_ponse, de_sign=de_sign)
reg_model_arma$coefficients
all.equal(reg_model_arma$coefficients[, "coeff"], unname(coef(reg_model)))
all.equal(unname(reg_model_arma$coefficients), unname(sum_mary$coefficients))
all.equal(drop(reg_model_arma$residuals), unname(reg_model$residuals))
all.equal(unname(reg_model_arma$stats), c(sum_mary$r.squared, unname(sum_mary$fstatistic[1])))
look_back <- 11
z_scores <- HighFreq::roll_zscores(res_ponse=res_ponse, de_sign=de_sign, look_back=look_back)
z_scores_r <- sapply(1:NROW(de_sign), function(ro_w) {
if (ro_w==1) return(0)
start_point <- max(1, ro_w-look_back+1)
sub_response <- res_ponse[start_point:ro_w]
sub_design <- de_sign[start_point:ro_w, ]
reg_model <- lm(sub_response ~ sub_design)
resid_uals <- reg_model$residuals
resid_uals[NROW(resid_uals)]/sd(resid_uals)
})  # end sapply
all.equal(unname(z_scores[-(1:look_back)]), unname(z_scores_r[-(1:look_back)]))
ls()
clo_se <- Cl(rutils::env_etf$VTI)
date_s <- xts::.index(clo_se)
z_scores <- HighFreq::roll_zscores(res_ponse=clo_se, de_sign=date_s, look_back=look_back)
foo <- t(clo_se)
tail(foo)
foo <- t(as.numeric(clo_se))
tail(foo)
foo <- as.numeric(clo_se)
tail(foo)
z_scores <- HighFreq::roll_zscores(res_ponse=as.numeric(clo_se), de_sign=date_s, look_back=look_back)
foo <- t(as.numeric(clo_se))
dim(foo)
foo <- matrix(as.numeric(clo_se), nc=1)
tail(foo)
z_scores <- HighFreq::roll_zscores(res_ponse=matrix(as.numeric(clo_se), nc=1),
de_sign=date_s, look_back=look_back)
z_scores <- HighFreq::roll_zscores(res_ponse=matrix(as.numeric(clo_se), nc=1),
de_sign=matrix(as.numeric(date_s), nc=1),
look_back=look_back)
class(z_scores)
tail(z_scores)
head(z_scores)
z_scores <- HighFreq::roll_zscores(res_ponse=matrix(as.numeric(clo_se), nc=1),
de_sign=as.numeric(date_s),
look_back=look_back)
z_scores <- HighFreq::roll_zscores(res_ponse=as.numeric(clo_se),
de_sign=matrix(as.numeric(date_s), nc=1),
look_back=look_back)
dygraphs::dygraph(z_scores, main="Z-scores of VTI time series regressions")
dygraphs::dygraph(xts(z_scores, index(clo_se)),
main="Z-scores of VTI time series regressions")
hist(z_scores)
library(HighFreq)
library(HighFreq)
library(HighFreq)
clo_se <- as.numeric(Cl(rutils::env_etf$VTI))
date_s <- xts::.index(clo_se)
z_scores <- HighFreq::roll_zscores(res_ponse=clo_se,
de_sign=matrix(as.numeric(date_s), nc=1),
look_back=look_back)
date_s <- xts::.index(rutils::env_etf$VTI)
z_scores <- HighFreq::roll_zscores(res_ponse=clo_se,
de_sign=matrix(as.numeric(date_s), nc=1),
look_back=look_back)
hist(z_scores)
ls()
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/lm_arma.cpp")
ls()
in_nov <- rnorm(100)
foo <- calc_scaled(vec_tor=in_nov, use_median=FALSE)
head(foo)
bar <- scale(in_nov)
head(bar)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/lm_arma.cpp")
foo <- calc_scaled(vec_tor=in_nov, use_median=FALSE)
drop(foo)
drop(head(foo))
bar <- scale(in_nov)
head(bas)
head(bar)
drop(head(foo))
drop(head(bar))
all.equal(foo, bar)
NROW(bar)
NROW(foo)
head(bar)
head(foo)
all.equal(foo, bar)
cbind(foo, bar)
class(foo)
class(bar)
attributes(bar)
attributes(foo)
attributes(drop(head(bar)))
attributes(drop(bar))
all.equal(as.numeric(foo), as.numeric(bar))
?scale
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/lm_arma.cpp")
foo <- calc_scaled(vec_tor=in_nov, use_median=FALSE)
foo <- calc_scaled(mat_rix=in_nov, use_median=FALSE)
foo <- calc_scaled(mat_rix=matrix(in_nov, nc=1), use_median=FALSE)
drop(head(foo))
bar <- scale(in_nov)
all.equal(as.numeric(foo), as.numeric(bar))
in_nov <- matrix(rnorm(200), nc=2)
foo <- calc_scaled(mat_rix=in_nov, use_median=FALSE)
bar <- scale(in_nov)
all.equal(as.numeric(foo), as.numeric(bar))
dim(foo)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/lm_arma.cpp")
foo <- calc_scaled(mat_rix=in_nov, use_median=FALSE)
all.equal(as.numeric(foo), as.numeric(bar))
all.equal(as.numeric(foo), as.numeric(bar))
head(bar)
head(foo)
library(microbenchmark)
summary(microbenchmark(
pure_r=scale(in_nov),
rcpp=calc_scaled(mat_rix=in_nov, use_median=FALSE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
pure_r=scale(in_nov),
rcpp=calc_scaled(mat_rix=in_nov, use_median=FALSE),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
pure_r=scale(in_nov),
rcpp=calc_scaled(mat_rix=in_nov, use_median=FALSE),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
in_nov <- matrix(rnorm(2000), nc=2)
summary(microbenchmark(
pure_r=scale(in_nov),
rcpp=calc_scaled(mat_rix=in_nov, use_median=FALSE),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
in_nov <- matrix(rnorm(20000), nc=2)
summary(microbenchmark(
pure_r=scale(in_nov),
rcpp=calc_scaled(mat_rix=in_nov, use_median=FALSE),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
in_nov <- matrix(rnorm(20000), nc=20)
summary(microbenchmark(
pure_r=scale(in_nov),
rcpp=calc_scaled(mat_rix=in_nov, use_median=FALSE),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
in_nov <- matrix(rnorm(2000), nc=2)
summary(microbenchmark(
pure_r=scale(in_nov),
rcpp=calc_scaled(mat_rix=in_nov, use_median=FALSE),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
Rcpp::sourceCpp('C:/Develop/R/Rcpp/lm_arma.cpp')
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/lm_arma.cpp")
look_back <- 11
dim(indicator_s)
indicator_s <- matrix(rnorm(2000), nc=2)
indicator_s <- roll::roll_scale(data=indicator_s, width=look_back, min_obs=1)
num_returns <- indicator_s
bar <- roll_scale(mat_rix=num_returns, look_back=look_back, use_median=TRUE)
tail(drop(bar))
bar <- roll_scale(mat_rix=num_returns, look_back=look_back)
foo <- roll::roll_scale(data=num_returns, width=look_back, min_obs=1)
tail(drop(foo))
bar <- roll_scale(mat_rix=num_returns, look_back=look_back, use_median=FALSE)
tail(drop(bar))
bar <- roll_scale(mat_rix=num_returns, look_back=look_back)
tail(drop(bar))
head(drop(bar))
head(drop(foo))
head(drop(bar), 13)
head(drop(foo), 13)
summary(microbenchmark(
pure_r=(num_returns-median(num_returns))/mad(num_returns, constant=1.0),
roll=roll::roll_scale(data=num_returns, width=look_back, min_obs=1),
rcpp=calc_scaled(vec_tor=num_returns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
foo <- sapply((look_back+1):NROW(re_turns), function(it) {
sub_vec <- re_turns[(it-look_back+1):it]
(re_turns[it]-median(sub_vec))/mad(sub_vec, constant=1.0)
})  # end sapply
foo <- sapply((look_back+1):NROW(num_returns), function(it) {
sub_vec <- num_returns[(it-look_back+1):it]
(num_returns[it]-median(sub_vec))/mad(sub_vec, constant=1.0)
})  # end sapply
tail(foo)
tail(num_returns)
bar <- roll_scale(mat_rix=num_returns, look_back=look_back, use_median=TRUE)
tail(drop(bar))
summary(microbenchmark(
roll=roll::roll_scale(data=num_returns, width=look_back, min_obs=1),
rcpp=roll_scale(mat_rix=num_returns, look_back=look_back),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
roll=roll::roll_scale(data=num_returns, width=look_back, min_obs=1),
rcpp=roll_scale(mat_rix=num_returns, look_back=look_back),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
num_returns <- matrix(rnorm(20000), nc=2)
summary(microbenchmark(
roll=roll::roll_scale(data=num_returns, width=look_back, min_obs=1),
rcpp=roll_scale(mat_rix=num_returns, look_back=look_back),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
roll=roll::roll_scale(data=num_returns, width=look_back, min_obs=1),
rcpp=roll_scale(mat_rix=num_returns, look_back=look_back),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
roll=roll::roll_scale(data=num_returns, width=look_back, min_obs=1),
rcpp=roll_scale(mat_rix=num_returns, look_back=look_back, use_median=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
roll=roll::roll_scale(data=num_returns, width=look_back, min_obs=1),
rcpp=roll_scale(mat_rix=num_returns, look_back=look_back, use_median=TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
head(drop(bar), 13)
head(drop(foo), 13)
bar <- roll_scale(mat_rix=num_returns, look_back=look_back, use_median=FALSE)
foo <- roll::roll_scale(data=num_returns, width=look_back, min_obs=1)
head(drop(bar), 13)
head(drop(foo), 13)
all.equal(foo[-1, ], bar[-1, ])
bar <- roll_scale(mat_rix=num_returns[1, ], look_back=look_back, use_median=FALSE)
foo <- roll::roll_scale(data=num_returns[1, ], width=look_back, min_obs=1)
bar <- roll_scale(mat_rix=num_returns[, 1], look_back=look_back, use_median=FALSE)
foo <- roll::roll_scale(data=num_returns[, 1], width=look_back, min_obs=1)
tail(num_returns[, 1])
tail(num_returns)
class(num_returns)
bar <- roll_scale(mat_rix=num_returns[, 1, drop=FALSE], look_back=look_back, use_median=FALSE)
foo <- roll::roll_scale(data=num_returns[, 1, drop=FALSE], width=look_back, min_obs=1)
all.equal(foo[-1, ], bar[-1, ])
head(drop(bar), 13)
head(drop(foo), 13)
sum(is.na(foo))
sum(is.na(bar))
library(HighFreq)
