boot_strap <- t(boot_strap)
head(boot_strap)
sapply(boot_strap, sd)
dim(boot_strap)
options(max.print=40)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=oh_lc)
# calculate variance estimates
c(close=rutils::diff_xts(oh_lc[, 4])^2,
open-and-close=rutils::diff_xts(0.5*(oh_lc[, 1] + oh_lc[, 4]))^2)
})  # end sapply
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=oh_lc)
# calculate variance estimates
c(close=rutils::diff_xts(oh_lc[, 4])^2,
open_and_close=rutils::diff_xts(0.5*(oh_lc[, 1] + oh_lc[, 4]))^2)
})  # end sapply
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=oh_lc)
# calculate variance estimates
c(close=sqrt(mean((24*60*60)*rutils::diff_xts(oh_lc[, 4])^2)),
open_and_close=sqrt(mean((24*60*60)*rutils::diff_xts(0.5*(oh_lc[, 1] + oh_lc[, 4]))^2)))
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, sd)
oh_lc <- HighFreq::random_ohlc(oh_lc=oh_lc)
diff_ohlc <- rutils::diff_xts(oh_lc)
vari_ance <- c(close=oh_lc[, 4]^2,
open_and_close=(0.5*(oh_lc[, 1] + oh_lc[, 4]))^2)
head(vari_ance)
vari_ance <- merge(close=oh_lc[, 4]^2,
open_and_close=(0.5*(oh_lc[, 1] + oh_lc[, 4]))^2)
head(vari_ance)
vari_ance <- merge(close=diff_ohlc[, 4]^2,
open_and_close=(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2)
head(vari_ance)
vari_ance <- sqrt(mean((24*60*60)*
merge(diff_ohlc[, 4]^2,
(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2)/c(1, diff(.index(oh_lc)))))
vari_ance
c(close=sqrt(mean((24*60*60)*diff_ohlc[, 4]^2/diff_index)),
open_and_close=sqrt(mean((24*60*60)*(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2/diff_index)))
diff_index <- c(1, diff(.index(oh_lc)))
c(close=sqrt(mean((24*60*60)*diff_ohlc[, 4]^2/diff_index)),
open_and_close=sqrt(mean((24*60*60)*(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2/diff_index)))
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=oh_lc)
diff_ohlc <- rutils::diff_xts(oh_lc)
diff_index <- c(1, diff(.index(oh_lc)))
# calculate variance estimates
c(close=sqrt(mean((24*60*60)*diff_ohlc[, 4]^2/diff_index)),
open_and_close=sqrt(mean((24*60*60)*(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2/diff_index)))
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, sd)
?sample
sample.int(2:10)
sample.int(10)
?sample.int
sample(2:10)
sample(2:10)
library(HighFreq)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=oh_lc)
diff_ohlc <- rutils::diff_xts(oh_lc)
diff_index <- c(1, diff(.index(oh_lc)))
# calculate variance estimates
c(close=sqrt(mean((24*60*60)*diff_ohlc[, 4]^2/diff_index)),
open_and_close=sqrt(mean((24*60*60)*(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2/diff_index)))
})  # end sapply
boot_strap <- t(boot_strap)
apply(boot_strap, MARGIN=2, sd)
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})
get_variance <- function(oh_lc, calc_method="garman.klass_yz") {
sym_bol <- rutils::na_me(oh_lc)
oh_lc <- log(oh_lc[, 1:4])
vari_ance <- switch(calc_method,
"close"={rutils::diff_xts(oh_lc[, 4])^2},
"open-and-close"={rutils::diff_xts(0.5*(oh_lc[, 1] + oh_lc[, 4]))^2},
"garman.klass"={0.5*(oh_lc[, 2]-oh_lc[, 3])^2 -
(2*log(2)-1)*(oh_lc[, 4]-oh_lc[, 1])^2},
"rogers.satchell"={(oh_lc[, 2]-oh_lc[, 4])*(oh_lc[, 2]-oh_lc[, 1]) +
(oh_lc[, 3]-oh_lc[, 4])*(oh_lc[, 3]-oh_lc[, 1])},
"garman.klass_yz"={(oh_lc[, 1]-rutils::lag_xts(oh_lc[, 4]))^2 +
0.5*(oh_lc[, 2]-oh_lc[, 3])^2 -
(2*log(2)-1)*(oh_lc[, 4]-oh_lc[, 1])^2},
"yang.zhang"={(oh_lc[, 1]-rutils::lag_xts(oh_lc[, 4]))^2 +
0.67*(oh_lc[, 1]-oh_lc[, 4])^2 +
0.33*((oh_lc[, 2]-oh_lc[, 4])*(oh_lc[, 2]-oh_lc[, 1]) +
(oh_lc[, 3]-oh_lc[, 4])*(oh_lc[, 3]-oh_lc[, 1]))}
)  # end switch
vari_ance <- vari_ance/c(1, diff(.index(oh_lc)))
vari_ance[1, ] <- 0
vari_ance <- na.locf(vari_ance)
colnames(vari_ance) <- paste0(sym_bol, ".Variance")
vari_ance
}  # end get_variance
meth_ods <- c("close", "open-and-close", "garman.klass", "rogers.satchell", "garman.klass_yz", "yang.zhang")
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(SPY, calc_method=meth_od)))
})
boot_strap <- sapply(1:20, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=SPY)
diff_ohlc <- rutils::diff_xts(oh_lc)
diff_index <- c(1, diff(.index(oh_lc)))
# calculate variance estimates
c(close=sqrt(mean((24*60*60)*diff_ohlc[, 4]^2/diff_index)),
open_and_close=sqrt(mean((24*60*60)*(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2/diff_index)))
})
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, sd)
dim(oh_lc)
boot_strap <- sapply(1:20, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=SPY)
diff_ohlc <- rutils::diff_xts(log(oh_lc))
diff_index <- c(1, diff(.index(oh_lc)))
# calculate variance estimates
c(close=sqrt(mean((24*60*60)*diff_ohlc[, 4]^2/diff_index)),
open_and_close=sqrt(mean((24*60*60)*(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2/diff_index)))
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:50, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=SPY)
diff_ohlc <- rutils::diff_xts(log(oh_lc))
diff_index <- c(1, diff(.index(oh_lc)))
# calculate variance estimates
c(close=sqrt(mean((24*60*60)*diff_ohlc[, 4]^2/diff_index)),
open_and_close=sqrt(mean((24*60*60)*(0.5*(diff_ohlc[, 1] + diff_ohlc[, 4]))^2/diff_index)))
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- t(boot_strap)
apply(boot_strap, MARGIN=2, sd)
apply(boot_strap, MARGIN=2, mean)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=SPY)
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
sum(is.na(boot_strap))
sum(is.nan(boot_strap))
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})
boot_strap <- t(boot_strap)
head(boot_strap)
sum(is.na(boot_strap))
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})
boot_strap <- t(boot_strap)
head(boot_strap)
sum(is.na(boot_strap))
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:200, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})
boot_strap <- t(boot_strap)
head(boot_strap)
sum(is.na(boot_strap))
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
library(TTR)
meth_ods <- c("close", "garman.klass", "rogers.satchell", "gk.yz", "yang.zhang")
boot_strap <- sapply(1:10, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*TTR::volatility(oh_lc, n=1, calc=meth_od)))
})  # end sapply
})
boot_strap <- sapply(1:10, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*TTR::volatility(oh_lc, n=2, calc=meth_od)))
})  # end sapply
})
boot_strap <- sapply(1:10, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*TTR::volatility(oh_lc, n=3, calc=meth_od)))
})  # end sapply
})
boot_strap <- t(boot_strap)
head(boot_strap)
boot_strap <- sapply(1:10, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*TTR::volatility(oh_lc, calc=meth_od)))
})  # end sapply
})
boot_strap <- t(boot_strap)
head(boot_strap)
head(oh_lc)
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*TTR::volatility(oh_lc, calc=meth_od)))
})
sapply(meth_ods, function(meth_od) {
mean((24*60*60)*TTR::volatility(oh_lc, calc=meth_od))
})
foo <- TTR::volatility(oh_lc)
head(foo)
tail(foo)
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*na.omit(TTR::volatility(oh_lc, calc=meth_od))))
})  # end sapply
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*na.omit(TTR::volatility(oh_lc, calc=meth_od))))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
sum(is.na(boot_strap))
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
apply(boot_strap, MARGIN=2, mean)/260
apply(boot_strap, MARGIN=2, mean)/sqrt(260)
foo <- boot_strap
boot_strap <- boot_strap^2
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- boot_strap/sqrt(260)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
mean((24*60*60)*na.omit(TTR::volatility(oh_lc, N=1, calc=meth_od)))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
sum(is.na(boot_strap))
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- boot_strap/sqrt(24*60*60)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- boot_strap*sqrt(60)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
mean(sqrt(24*60)*na.omit(TTR::volatility(oh_lc, N=1, calc=meth_od)))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc()
# calculate variance estimates
sapply(meth_ods, function(meth_od) {
sqrt((24*60)*mean(na.omit(TTR::volatility(oh_lc, N=1, calc=meth_od))^2))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
library(HighFreq)
get_variance <- function(oh_lc, calc_method="garman.klass_yz") {
sym_bol <- rutils::na_me(oh_lc)
oh_lc <- log(oh_lc[, 1:4])
vari_ance <- switch(calc_method,
"close"={rutils::diff_xts(oh_lc[, 4])^2},
"open-and-close"={rutils::diff_xts(0.5*(oh_lc[, 1] + oh_lc[, 4]))^2},
"garman.klass"={0.5*(oh_lc[, 2]-oh_lc[, 3])^2 -
(2*log(2)-1)*(oh_lc[, 4]-oh_lc[, 1])^2},
"rogers.satchell"={(oh_lc[, 2]-oh_lc[, 4])*(oh_lc[, 2]-oh_lc[, 1]) +
(oh_lc[, 3]-oh_lc[, 4])*(oh_lc[, 3]-oh_lc[, 1])},
"garman.klass_yz"={(oh_lc[, 1]-rutils::lag_xts(oh_lc[, 4]))^2 +
0.5*(oh_lc[, 2]-oh_lc[, 3])^2 -
(2*log(2)-1)*(oh_lc[, 4]-oh_lc[, 1])^2},
"yang.zhang"={(oh_lc[, 1]-rutils::lag_xts(oh_lc[, 4]))^2 +
0.67*(oh_lc[, 1]-oh_lc[, 4])^2 +
0.33*((oh_lc[, 2]-oh_lc[, 4])*(oh_lc[, 2]-oh_lc[, 1]) +
(oh_lc[, 3]-oh_lc[, 4])*(oh_lc[, 3]-oh_lc[, 1]))}
)  # end switch
vari_ance <- vari_ance/c(1, diff(.index(oh_lc)))
vari_ance[1, ] <- 0
vari_ance <- na.locf(vari_ance)
colnames(vari_ance) <- paste0(sym_bol, ".Variance")
vari_ance
}  # end get_variance
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(SPY)
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})  # end sapply
boot_strap <- sapply(1:10, function(x) {
oh_lc <- HighFreq::random_ohlc(SPY)
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})  # end sapply
debug(get_variance)
boot_strap <- sapply(1:10, function(x) {
oh_lc <- HighFreq::random_ohlc(SPY)
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})  # end sapply
dim(vari_ance)
dim(vari_ance)
calc_method
undebug(get_variance)
meth_ods <- c("close", "open-and-close", "garman.klass", "rogers.satchell", "garman.klass_yz", "yang.zhang")
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(SPY)
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
head(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
apply(boot_strap, MARGIN=2, mean)/apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:300, function(x) {
oh_lc <- HighFreq::random_ohlc(SPY)
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
foo <- boot_strap
meth_ods <- c("close", "garman.klass", "rogers.satchell", "gk.yz", "yang.zhang")
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=SPY)
sapply(meth_ods, function(meth_od) {
sqrt((24*60)*mean(na.omit(TTR::volatility(oh_lc, N=1, calc=meth_od))^2))
})  # end sapply
})  # end sapply
apply(boot_strap, MARGIN=2, mean)
boot_strap <- t(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc()
sapply(meth_ods, function(meth_od) {
sqrt((24*60)*mean(na.omit(TTR::volatility(oh_lc, N=1, calc=meth_od))^2))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
random_ohlc <- function(oh_lc=NULL, re_duce=TRUE, ...) {
if (is.null(oh_lc)) {
# create time index of one second intervals over several days
in_dex <- seq(from=as.POSIXct(paste(Sys.Date()-13, "09:30:00")),
to=as.POSIXct(paste(Sys.Date()-1, "16:00:00")), by="1 sec")
# create synthetic xts of random log-normal prices
x_ts <- xts(exp(cumsum(0.01/sqrt(86400)*rnorm(length(in_dex)))), order.by=in_dex)
# add trade volume column
x_ts <- merge(x_ts, volume=sample(x=10*(2:18), size=length(in_dex), replace=TRUE))
# aggregate to minutes OHLC data
to.period(x=x_ts, period="hours")
} else {
oh_lc <- log(oh_lc)  # transform to normal
if (re_duce)  # calculate reduced form of oh_lc
oh_lc <- rutils::diff_ohlc(oh_lc)
# randomly sample from the rows of oh_lc
oh_lc <- xts(coredata(oh_lc)[c(1, sample(x=2:NROW(oh_lc), replace=TRUE)), ], order.by=index(oh_lc))
# return standard form of randomized oh_lc
exp(rutils::diff_ohlc(oh_lc, re_duce=FALSE))
}
}  # end random_ohlc
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc()
sapply(meth_ods, function(meth_od) {
sqrt((24*60)*mean(na.omit(TTR::volatility(oh_lc, N=1, calc=meth_od))^2))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
random_ohlc <- function(oh_lc=NULL, re_duce=TRUE, ...) {
if (is.null(oh_lc)) {
# create time index of one second intervals over several days
in_dex <- seq(from=as.POSIXct(paste(Sys.Date()-13, "09:30:00")),
to=as.POSIXct(paste(Sys.Date()-1, "16:00:00")), by="1 sec")
# create synthetic xts of random log-normal prices
x_ts <- xts(exp(cumsum(0.01/sqrt(86400)*rnorm(length(in_dex)))), order.by=in_dex)
# add trade volume column
x_ts <- merge(x_ts, volume=sample(x=10*(2:18), size=length(in_dex), replace=TRUE))
# aggregate to minutes OHLC data
to.period(x=x_ts, period="hours")
} else {
oh_lc <- log(oh_lc)  # transform to normal
if (re_duce)  # calculate reduced form of oh_lc
oh_lc <- rutils::diff_ohlc(oh_lc)
# randomly sample from the rows of oh_lc
oh_lc <- xts(coredata(oh_lc)[c(1, sample(x=2:NROW(oh_lc), replace=TRUE)), ], order.by=index(oh_lc))
# return standard form of randomized oh_lc
to.period(exp(rutils::diff_ohlc(oh_lc, re_duce=FALSE)), period="hours")
}
}  # end random_ohlc
boot_strap <- sapply(1:100, function(x) {
oh_lc <- HighFreq::random_ohlc(oh_lc=SPY)
sapply(meth_ods, function(meth_od) {
sqrt((24*60)*mean(na.omit(TTR::volatility(oh_lc, N=1, calc=meth_od))^2))
})  # end sapply
})  # end sapply
boot_strap <- t(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
get_variance <- function(oh_lc, calc_method="garman.klass_yz") {
sym_bol <- rutils::na_me(oh_lc)
oh_lc <- log(oh_lc[, 1:4])
vari_ance <- switch(calc_method,
"close"={rutils::diff_xts(oh_lc[, 4])^2},
"open-and-close"={rutils::diff_xts(0.5*(oh_lc[, 1] + oh_lc[, 4]))^2},
"garman.klass"={0.5*(oh_lc[, 2]-oh_lc[, 3])^2 -
(2*log(2)-1)*(oh_lc[, 4]-oh_lc[, 1])^2},
"rogers.satchell"={(oh_lc[, 2]-oh_lc[, 4])*(oh_lc[, 2]-oh_lc[, 1]) +
(oh_lc[, 3]-oh_lc[, 4])*(oh_lc[, 3]-oh_lc[, 1])},
"garman.klass_yz"={(oh_lc[, 1]-rutils::lag_xts(oh_lc[, 4]))^2 +
0.5*(oh_lc[, 2]-oh_lc[, 3])^2 -
(2*log(2)-1)*(oh_lc[, 4]-oh_lc[, 1])^2},
"yang.zhang"={(oh_lc[, 1]-rutils::lag_xts(oh_lc[, 4]))^2 +
0.67*(oh_lc[, 1]-oh_lc[, 4])^2 +
0.33*((oh_lc[, 2]-oh_lc[, 4])*(oh_lc[, 2]-oh_lc[, 1]) +
(oh_lc[, 3]-oh_lc[, 4])*(oh_lc[, 3]-oh_lc[, 1]))}
)  # end switch
vari_ance <- vari_ance/c(1, diff(.index(oh_lc)))
vari_ance[1, ] <- 0
vari_ance <- na.locf(vari_ance)
colnames(vari_ance) <- paste0(sym_bol, ".Variance")
vari_ance
}  # end get_variance
meth_ods <- c("close", "open-and-close", "garman.klass", "rogers.satchell", "garman.klass_yz", "yang.zhang")
boot_strap <- sapply(1:200, function(x) {
oh_lc <- HighFreq::random_ohlc()
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})  # end sapply
})
boot_strap <- t(boot_strap)
apply(boot_strap, MARGIN=2, mean)
apply(boot_strap, MARGIN=2, sd)
random_ohlc
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(oh_lc, calc_method=meth_od)))
})
sapply(meth_ods, function(meth_od) {
sqrt(mean((24*60*60)*get_variance(SPY, calc_method=meth_od)))
})
library(HighFreq)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
