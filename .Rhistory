look_back=look_back)
de_sign <- matrix(as.numeric(date_s), nc=1)
foo <- MASS::ginv(de_sign)
dim(foo)
foo[111:122]
foo[1111:1122]
tail(de_sign)
class(date_s)
de_sign <- matrix(date_s, nc=1)
foo <- MASS::ginv(de_sign)
foo <- unique(date_s)
NROW(foo)
NROW(date_s)
head(foo)
look_back <- 11
z_scores <- HighFreq::roll_zscores(res_ponse=clo_se,
de_sign=de_sign,
look_back=look_back)
tail(z_scores)
head(z_scores)
look_back
range(z_scores)
hist(z_scores)
colnames(z_scores) <- "z_scores"
z_scores[1:3] <- 0
dim(oh_lc)
tail(oh_lc)
class(z_scores)
tail(z_scores)
class(xts::.index(oh_lc))
de_sign <- matrix(xts::.index(oh_lc), nc=1)
look_back <- 3
sig_nal <- HighFreq::roll_zscores(res_ponse=clo_se, de_sign=de_sign, look_back=look_back)
foo <- MASS::ginv(de_sign)
foo <- foo %*% de_sign
tail(foo)
sig_nal[1:look_back, ] <- 0
sd(sig_nal)
head(sig_nal)
tail(sig_nal)
sum(is.na(sig_nal))
which(is.na(sig_nal))
de_sign[17527:17535, ]
sig_nal[17527:17535, ]
foo <- zoo::na.locf(sig_nal)
foo[17527:17535, ]
sig_nal <- zoo::na.locf(sig_nal)
sd(sig_nal)
sum(is.na(sig_nal))
hist(sig_nal, t="l")
hist(sig_nal)
hist(sig_nal)
sig_nal[1:look_back, ] <- 0
sig_nal <- zoo::na.locf(sig_nal)
sd(sig_nal)
sum(is.na(sig_nal))
sum(is.nan(sig_nal))
sum(is.infinite(sig_nal))
which(is.infinite(sig_nal))
sig_nal[3930:3940, ]
sig_nal[is.infinite(sig_nal)] <- NA
sig_nal <- zoo::na.locf(sig_nal)
sum(is.infinite(sig_nal))
sum(is.na(sig_nal))
sd(sig_nal)
sig_nal[3930:3940, ]
class(close_num)
calc_signal
calc_signal <- function(oh_lc, clo_se, de_sign, look_short, look_long=look_short, high_freq=TRUE) {
# signal from t-value of trailing slope
if (high_freq)
# Calculate the signal as the residual of the rolling time series
# regressions of the clo_se prices
sig_nal <- HighFreq::roll_zscores(res_ponse=clo_se, de_sign=de_sign, look_back=look_short)
else {
# signal equal to trailing average returns
# vari_ance <- HighFreq::roll_variance(oh_lc=oh_lc, look_back=look_long, sca_le=FALSE)
# vari_ance[vari_ance==0] <- as.numeric(vari_ance[2])
# re_turns <- rutils::diff_it(clo_se, lagg=look_short)/look_short/sqrt(vari_ance)
# re_turns <- roll::roll_scale(data=re_turns, width=look_long, min_obs=1, center=FALSE)
# vari_ance <- roll::roll_scale(data=vari_ance, width=look_long, min_obs=1, center=FALSE)
# sig_nal <- re_turns + vari_ance
# signal equal to trailing average returns
sig_nal <- rutils::diff_it(clo_se, lagg=look_short)/sqrt(look_short)/sqrt(HighFreq::roll_variance(oh_lc=oh_lc, look_back=look_short, sca_le=FALSE))
# sig_nal <- roll_zscores(res_ponse=clo_se, de_sign=de_sign, look_back=look_short)
}  # end if
sig_nal[1:look_short, ] <- 0
# sig_nal <- HighFreq::roll_scale(mat_rix=sig_nal, look_back=look_short, use_median=TRUE)
# sig_nal[1:look_short, ] <- 0
sig_nal[is.na(sig_nal), ] <- 0
sig_nal[is.infinite(sig_nal), ] <- 0
# rutils::lag_it(sig_nal, lagg=trade_lag)
sig_nal
}  # end calc_signal
dim(clo_se)
class(close_num)
op_en <- Op(log_ohlc)
hi_gh <- Hi(log_ohlc)
lo_w <- Lo(log_ohlc)
close_high <- (close_num == as.numeric(hi_gh))
close_low <- (close_num == as.numeric(lo_w))
HighFreq::roll_variance
HighFreq::roll_zscores
calc_signal <- function(oh_lc, clo_se, de_sign, look_short, look_long=look_short, high_freq=TRUE) {
# signal from t-value of trailing slope
if (high_freq)
# Calculate the signal as the residual of the rolling time series
# regressions of the clo_se prices
sig_nal <- HighFreq::roll_zscores(res_ponse=clo_se, de_sign=de_sign, look_back=look_short)
else {
# signal equal to trailing average returns
# vari_ance <- HighFreq::roll_variance(oh_lc=oh_lc, look_back=look_long, sca_le=FALSE)
# vari_ance[vari_ance==0] <- as.numeric(vari_ance[2])
# re_turns <- rutils::diff_it(clo_se, lagg=look_short)/look_short/sqrt(vari_ance)
# re_turns <- roll::roll_scale(data=re_turns, width=look_long, min_obs=1, center=FALSE)
# vari_ance <- roll::roll_scale(data=vari_ance, width=look_long, min_obs=1, center=FALSE)
# sig_nal <- re_turns + vari_ance
# signal equal to trailing average returns
sig_nal <- rutils::diff_it(clo_se, lagg=look_short)/sqrt(look_short)/sqrt(HighFreq::roll_variance(oh_lc=oh_lc, look_back=look_short, sca_le=FALSE))
# sig_nal <- roll_zscores(res_ponse=clo_se, de_sign=de_sign, look_back=look_short)
}  # end if
sig_nal[1:look_short, ] <- 0
# sig_nal <- HighFreq::roll_scale(mat_rix=sig_nal, look_back=look_short, use_median=TRUE)
# sig_nal[1:look_short, ] <- 0
sig_nal[is.infinite(sig_nal)] <- NA
sig_nal <- zoo::na.locf(sig_nal)
# sig_nal[is.na(sig_nal), ] <- 0
# sig_nal[is.infinite(sig_nal), ] <- 0
# rutils::lag_it(sig_nal, lagg=trade_lag)
sig_nal
}  # end calc_signal
source("C:/Develop/R/scripts/calc_strategy.R")
HighFreq::roll_variance
date_s <- 1:NROW(oh_lc)
de_sign <- matrix(as.numeric(date_s), nc=1)
look_back <- 15
run_signal <- function(look_back, clo_se, de_sign) {
sig_nal <- HighFreq::roll_zscores(res_ponse=clo_se, de_sign=de_sign, look_back=look_back)
sig_nal[1:look_back, ] <- 0
# sig_nal <- HighFreq::roll_scale(mat_rix=sig_nal, look_back=look_back, use_median=TRUE)
# sig_nal[1:look_back, ] <- 0
# sig_nal[is.infinite(sig_nal), ] <- 0
sig_nal[is.infinite(sig_nal)] <- NA
sig_nal <- zoo::na.locf(sig_nal)
rutils::lag_it(sig_nal, lagg=1)
}  # end run_signal
look_back
sig_nal <- run_signal(look_back, clo_se, de_sign)
hist(sig_nal, xlim=c(-10, 10))
hist(sig_nal)
clus_ter <- makeCluster(num_cores-1)
clusterExport(clus_ter, varlist=c("clo_se", "de_sign"))
tail(clo_se)
clo_se <- as.numeric(Cl(oh_lc))
clo_se <- Cl(log_ohlc)
close_num <- as.numeric(clo_se)
re_turns <- rutils::diff_it(clo_se)
tail(re_turns)
date_s <- 1:NROW(oh_lc)
de_sign <- matrix(as.numeric(date_s), nc=1)
look_back <- 15
run_signal <- function(look_back, clo_se, de_sign) {
sig_nal <- HighFreq::roll_zscores(res_ponse=clo_se, de_sign=de_sign, look_back=look_back)
sig_nal[1:look_back, ] <- 0
# sig_nal <- HighFreq::roll_scale(mat_rix=sig_nal, look_back=look_back, use_median=TRUE)
# sig_nal[1:look_back, ] <- 0
# sig_nal[is.infinite(sig_nal), ] <- 0
sig_nal[is.infinite(sig_nal)] <- NA
sig_nal <- zoo::na.locf(sig_nal)
rutils::lag_it(sig_nal, lagg=1)
}  # end run_signal
sig_nal <- run_signal(look_back, clo_se, de_sign)
hist(sig_nal)
look_backs
signal_s <- parLapply(clus_ter, X=look_backs, fun=run_signal, clo_se=clo_se, de_sign=de_sign)
en_ter
en_ter <- 2.0
ex_it <- 0.5
run_strategy <- function(sig_nal, re_turns, en_ter, ex_it, close_high, close_low) {
po_sit <- rep(NA_integer_, NROW(sig_nal))
po_sit[1] <- 0
# po_sit[sig_nal < (-en_ter)] <- 1
po_sit[(sig_nal < (-en_ter)) & close_low] <- 1
# po_sit[sig_nal > en_ter] <- (-1)
po_sit[(sig_nal > en_ter) & close_high] <- (-1)
po_sit[abs(sig_nal) < ex_it] <- 0
po_sit <- zoo::na.locf(po_sit)
po_sit <- po_sit + rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
pnl_s[NROW(pnl_s)]
# colnames(pnl_s) <- "strategy"
}  # end run_strategy
log_ohlc <- log(oh_lc)
op_en <- Op(log_ohlc)
hi_gh <- Hi(log_ohlc)
lo_w <- Lo(log_ohlc)
clo_se <- Cl(log_ohlc)
close_num <- as.numeric(clo_se)
close_high <- (close_num == as.numeric(hi_gh))
close_low <- (close_num == as.numeric(lo_w))
date_s <- 1:NROW(oh_lc)
de_sign <- matrix(date_s, nc=1)
foo <- run_strategy(signal_s[[1]], re_turns, en_ter, ex_it, close_high, close_low)
pnl_s <- run_strategy(signal_s[[1]], re_turns, en_ter, ex_it, close_high, close_low)
class(pnl_s)
dygraphs::dygraph(cumsum(pnl_s), main="ES1 strategy")
sum(is.na(pnl_s))
foo <- cumsum(pnl_s)
tail(foo)
run_strategies <- function(sig_nal, re_turns, en_ters, ex_it, close_high=TRUE, close_low=TRUE) {
sapply(en_ters, run_strategy, sig_nal=sig_nal, re_turns=re_turns, ex_it=ex_it, close_high=TRUE, close_low=TRUE)
# pnl_s <- lapply(en_ters, run_strategy, sig_nal=sig_nal, re_turns=re_turns, ex_it=ex_it)
# pnl_s <- rutils::do_call(cbind, pnl_s)
# rowSums(pnl_s)
}  # end run_strategies
en_ters <- (5:40)/10
en_ters
run_strategies <- function(sig_nal, re_turns, en_ters, ex_it, close_high=TRUE, close_low=TRUE) {
sapply(en_ters, run_strategy, sig_nal=sig_nal, re_turns=re_turns, ex_it=ex_it, close_high=close_high, close_low=close_low)
# pnl_s <- lapply(en_ters, run_strategy, sig_nal=sig_nal, re_turns=re_turns, ex_it=ex_it)
# pnl_s <- rutils::do_call(cbind, pnl_s)
# rowSums(pnl_s)
}  # end run_strategies
clusterExport(clus_ter, varlist=c("run_strategy"))
pnl_s <- parLapply(clus_ter, X=signal_s, fun=run_strategies, re_turns=re_turns, en_ters=en_ters, ex_it=ex_it, close_high=close_high, close_low=close_low)
pnl_s <- rutils::do_call(cbind, pnl_s)
rownames(pnl_s) <- paste0("en_ter=", en_ters)
colnames(pnl_s) <- paste0("look_back=", look_backs)
heatmap(pnl_s, Colv=NA, Rowv=NA, col=c("red", "blue"))
foo <- pnl_s
pnl_s <- rowSums(pnl_s)
pnl_s <- xts(pnl_s, index(oh_lc))
pnl_s <- rowSums(pnl_s)
pnl_s <- foo
pnl_s <- rowSums(pnl_s)
dim(pnl_s)
NROW(pnl_s)
pnl_s
dim(foo)
foo
run_strategy <- function(sig_nal, re_turns, en_ter, ex_it, close_high=TRUE, close_low=TRUE) {
po_sit <- rep(NA_integer_, NROW(sig_nal))
po_sit[1] <- 0
# po_sit[sig_nal < (-en_ter)] <- 1
po_sit[(sig_nal < (-en_ter)) & close_low] <- 1
# po_sit[sig_nal > en_ter] <- (-1)
po_sit[(sig_nal > en_ter) & close_high] <- (-1)
po_sit[abs(sig_nal) < ex_it] <- 0
po_sit <- zoo::na.locf(po_sit)
po_sit <- po_sit + rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
pnl_s[NROW(pnl_s)]
# colnames(pnl_s) <- "strategy"
}  # end run_strategy
run_strategies <- function(sig_nal, re_turns, en_ters, ex_it, close_high=TRUE, close_low=TRUE) {
sapply(en_ters, run_strategy, sig_nal=sig_nal, re_turns=re_turns, ex_it=ex_it, close_high=close_high, close_low=close_low)
# pnl_s <- lapply(en_ters, run_strategy, sig_nal=sig_nal, re_turns=re_turns, ex_it=ex_it)
# pnl_s <- rutils::do_call(cbind, pnl_s)
# rowSums(pnl_s)
}  # end run_strategies
close_high <- TRUE
close_low <- TRUE
pnl_s <- parLapply(clus_ter, X=signal_s, fun=run_strategies, re_turns=re_turns, en_ters=en_ters, ex_it=ex_it, close_high=close_high, close_low=close_low)
pnl_s <- rutils::do_call(cbind, pnl_s)
rownames(pnl_s) <- paste0("en_ter=", en_ters)
colnames(pnl_s) <- paste0("look_back=", look_backs)
heatmap(pnl_s, Colv=NA, Rowv=NA, col=c("red", "blue"))
library(shiny); runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
source("C:/Develop/R/scripts/calc_strategy.R")
load(file="C:/Develop/data/combined.RData")
sym_bol <- "ES1"
ohlc_trade <- oh_lc[, paste(sym_bol, c("Open", "High", "Low", "Close"), sep=".")]
ohlc_trade <- log(ohlc_trade)
clo_se <- Cl(ohlc_trade)
close_num <- as.numeric(clo_se)
hi_gh <- Hi(ohlc_trade)
lo_w <- Lo(ohlc_trade)
close_high_trade <- (close_num == as.numeric(hi_gh))
close_low_trade <- (close_num == as.numeric(lo_w))
returns_trade <- rutils::diff_it(clo_se)
colnames(returns_trade) <- "returns"
sym_bol <- "ES1"
oh_lc <- oh_lc[, paste(sym_bol, c("Open", "High", "Low", "Close"), sep=".")]
log_ohlc <- log(oh_lc)
clo_se <- Cl(log_ohlc)
close_num <- as.numeric(clo_se)
hi_gh <- Hi(log_ohlc)
lo_w <- Lo(log_ohlc)
close_high <- (close_num == as.numeric(hi_gh))
close_low <- (close_num == as.numeric(lo_w))
re_turns <- rutils::diff_it(clo_se)
colnames(re_turns) <- "returns"
date_s <- 1:NROW(oh_lc)
de_sign <- matrix(date_s, nc=1)
en_ter
ex_it
look_short
trade_lag
look_short <- 11
trade_lag <- 1
look_long <- 11
signal_short <- calc_signal(oh_lc=log_ohlc, clo_se=close_num,
de_sign=de_sign,
look_short=look_short)
pnl_s <- sim_revert(signal_short, re_turns, close_high, close_high_count, close_low, close_low_count, en_ter, ex_it, trade_lag)
class(pnl_s)
dygraphs::dygraph(pnl_s, main="ES1 strategy")
sig_nal <- signal_short
hist(sig_nal)
po_sit <- rep(NA_integer_, NROW(sig_nal))
po_sit[1] <- 0
trade_lag
enter_long <- rutils::lag_it(sig_nal < (-en_ter), lagg=trade_lag)
po_sit[enter_long & close_low] <- 1
enter_short <- rutils::lag_it(sig_nal > en_ter, lagg=trade_lag)
po_sit[enter_short & close_high] <- (-1)
po_sit[abs(sig_nal) < ex_it] <- 0
po_sit <- zoo::na.locf(po_sit)
pnl_s <- cumsum(po_sit*re_turns)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
class(po_sit)
tail(po_sit, 22)
tail(po_sit, 122)
tail(po_sit, 222)
head(po_sit, 222)
sum(po_sit)
sum(po_sit>0)
sum(po_sit<0)
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
enter_long <- rutils::lag_it(sig_nal < (-en_ter), lagg=0)
rutils::lag_it
foo <- (sig_nal < (-en_ter))
class(foo)
tail(foo)
is.matrix(foo)
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
enter_long <- (sig_nal < (-en_ter))
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
runApp('C:/Develop/R/presentations/app_strategy_mean_revert2.R')
roll_count <- function(sig_nal) {
count_true <- integer(NROW(sig_nal))
count_true[1] <- sig_nal[1]
for (it in 2:NROW(sig_nal)) {
if (sig_nal[it])
count_true[it] <- count_true[it-1] + sig_nal[it]
else
count_true[it] <- sig_nal[it]
}  # end for
return(count_true)
}  # end roll_count
foo <- logical(21)
foo
foo[sample(NROW(foo), 12)] <- TRUE
barr <- roll_count(foo)
barr
foo
tail(close_high)
foo <- roll_count(close_high)
bar <- hist(foo)
bar <- hist(foo, xlim=c(0, 4))
bar
bar <- hist(foo, breaks=0:5)
bar <- hist(foo, breaks=0:15)
bar <- hist(foo, breaks=0:15, xlim=c(0, 4))
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
foo <- roll_count(close_high)
sig_nal <- roll_count(close_high)
is.numeric(sig_nal)
close_low_count <- roll_count(close_low)
close_high_count <- roll_count(close_high)
tail(close_high_count, 33)
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
po_sit[close_high_count>1] <- (-1)
po_sit[close_low_count>1] <- 1
po_sit <- zoo::na.locf(po_sit)
po_sit <- rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
class(pnl_s)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
po_sit[close_high_count>2] <- (-1)
po_sit[close_low_count>2] <- 1
po_sit <- zoo::na.locf(po_sit)
po_sit <- rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
po_sit[close_high_count>3] <- (-1)
po_sit[close_low_count>3] <- 1
po_sit <- zoo::na.locf(po_sit)
po_sit <- rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
hist(close_high_count, breaks=0:15, xlim=c(0, 4))
bar <- hist(close_high_count, breaks=0:15, xlim=c(0, 4))
bar$counts
bar <- hist(close_low_count, breaks=0:15, xlim=c(0, 4))
bar$counts
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
po_sit[close_high_count>4] <- (-1)
po_sit[close_low_count>2] <- 1
po_sit <- zoo::na.locf(po_sit)
po_sit <- rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
po_sit[close_high_count>5] <- (-1)
po_sit[close_low_count>2] <- 1
po_sit <- zoo::na.locf(po_sit)
po_sit <- rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
po_sit[close_high_count>3] <- (-1)
po_sit[close_low_count>2] <- 1
po_sit <- zoo::na.locf(po_sit)
po_sit <- rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
po_sit[close_high_count>3] <- (-1)
po_sit[close_low_count>1] <- 1
po_sit <- zoo::na.locf(po_sit)
po_sit <- rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
po_sit <- rep(NA_integer_, NROW(oh_lc))
po_sit[1] <- 0
po_sit[close_high_count>3] <- (-1)
po_sit[close_low_count>2] <- 1
po_sit <- zoo::na.locf(po_sit)
po_sit <- rutils::lag_it(po_sit, lagg=1)
pnl_s <- cumsum(po_sit*re_turns)
colnames(pnl_s) <- "strategy"
dygraphs::dygraph(pnl_s, main="ES1 strategy")
roll_countr <- function(sig_nal) {
count_true <- integer(NROW(sig_nal))
count_true[1] <- sig_nal[1]
for (it in 2:NROW(sig_nal)) {
if (sig_nal[it])
count_true[it] <- count_true[it-1] + sig_nal[it]
else
count_true[it] <- sig_nal[it]
}  # end for
return(count_true)
}  # end roll_countr
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/lm_arma.cpp")
library(microbenchmark)
summary(microbenchmark(
pure_r=roll_countr(close_high),
rcpp=roll_count(close_high),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
dim(roll_count(close_high))
all.equal(roll_countr(close_high), roll_count(close_high), check.attributes=FALSE)
all.equal(roll_countr(close_high), drop(roll_count(close_high)), check.attributes=FALSE)
foo <- xts::.index(oh_lc)
tail(foo)
foo <- close_high
close_high <- (close_num == drop(hi_gh))
all.equal(close_high, foo)
tail(drop(hi_gh))
class(drop(hi_gh))
close_high <- (close_num == as.numeric(hi_gh))
all.equal(close_high, foo)
open_num <- as.numeric(op_en)
open_num <- as.numeric(op_en)
open_high <- (open_num == as.numeric(hi_gh))
open_high_count <- roll_count(open_high)
open_low <- (open_num == as.numeric(lo_w))
open_low_count <- roll_count(open_low)
NRO(open_num)
NROW(open_num)
NROW(hi_gh)
load(file="C:/Develop/data/ES1.RData")
ls()
