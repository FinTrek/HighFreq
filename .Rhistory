}
if (na.rm) {
return(structure(na.omit(x), na.action = NULL))
}
else x
}
xts:::na_locf_xts(in_put)
na_locf_xts(in_put)
na_locf_xts(coredata(in_put))
in_put <- sample(22)
in_put[sample(NROW(in_put), 4)] <- NA
na_locf_xts(coredata(in_put))
na_locf_xts <- function (object, na.rm = FALSE, fromLast = FALSE, maxgap = Inf, ...) {
maxgap <- min(maxgap, NROW(object))
if (length(object) == 0)
return(object)
if (dim(object)[2] > 1) {
x <- object
for (n in 1:NCOL(object)) x[, n] <- .Call("na_locf",
object[, n], fromLast, maxgap, Inf, PACKAGE = "xts")
}
else {
x <- .Call("na_locf", object, fromLast, maxgap, Inf,
PACKAGE = "xts")
}
if (na.rm) {
return(structure(na.omit(x), na.action = NULL))
}
else x
}
na_locf <- function(in_put, from_last=TRUE) {
if (!(is.numeric(in_put) | is.logical(in_put) | xts::is.xts(in_put))) {  # in_put is not numeric
warning(paste("argument", deparse(substitute(in_put)), "must be numeric or Boolean."))
return(NULL)  # return NULL
}  # end if
if (!is.null(dim(in_put)))
return(na_locf_xts(in_put, fromLast=from_last))
if (from_last && is.na(in_put[1]))
in_put[1] <- 0
if (!from_last && is.na(in_put[NROW(in_put)]))
in_put[NROW(in_put)] <- 0
in_dex <- is.na(in_put)
in_dices <- rutils::diff_it(in_dex)
in_dices <- which(in_dices==1)
in_dices <- in_dices - 1
diff_indices <- rutils::diff_it(in_dices)
diff_indices[1] <- in_dices[1]
new_indices <- numeric(NROW(in_put))
new_indices[in_dices] <- diff_indices
new_indices <- cumsum(new_indices)
in_put[in_dex] <- in_put[new_indices[in_dex]]
in_put
}  # end na_locf
in_put
na_locf(in_put)
in_put <- xts(in_put, order.by=seq.Date(from=Sys.Date(), by=1, length.out=NROW(in_put)))
in_put
na_locf(in_put)
in_put <- sample(44)
in_put[sample(NROW(in_put), 8)] <- NA
in_put <- matrix(in_put, nc=2)
na_locf(in_put)
in_put <- xts(in_put, order.by=seq.Date(from=Sys.Date(), by=1, length.out=NROW(in_put)))
na_locf(in_put)
in_put
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
in_put <- coredata(in_put)
in_put
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
na_locf_xts <- function (in_put, na.rm=FALSE, from_last=FALSE, maxgap=Inf, ...) {
maxgap <- min(maxgap, NROW(in_put))
if (NCOL(in_put) > 1) {
for (n in 1:NCOL(in_put))
in_put[, n] <- .Call("na_locf", in_put[, n], from_last, maxgap, Inf, PACKAGE="xts")
}
else {
in_put <- .Call("na_locf", in_put, from_last, maxgap, Inf, PACKAGE="xts")
}
if (na.rm) {
return(structure(na.omit(in_put), na.action=NULL))
}
else
in_put
}  # end na_locf_xts
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
in_put
in_put <- xts(in_put, order.by=seq.Date(from=Sys.Date(), by=1, length.out=NROW(in_put)))
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
in_put
na_locf_xts(coredata(in_put))
na_locf_xts(in_put)
in_put <- sample(22)
in_put[sample(NROW(in_put), 4)] <- NA
in_put <- xts(in_put, order.by=seq.Date(from=Sys.Date(), by=1, length.out=NROW(in_put)))
in_put
na_locf(in_put)
xts:::na.locf.xts(in_put)
xts:::na.locf.xts(coredata(in_put))
na_locf_xts(in_put)
na_locf_xts(coredata(in_put))
na_locf_xts(as.vector(in_put))
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
in_put <- as.vector(in_put)
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
r_utils=na_locf(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
in_put
NCOL(in_put)
summary(microbenchmark::microbenchmark(
na_locf=na_locf(in_put),
na_locf_xts=na_locf_xts(in_put),
z_oo=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
na_locf_xts=na_locf_xts(in_put),
na_locf=na_locf(in_put),
na.locf=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
na_locf_xts=na_locf_xts(in_put),
na_locf=na_locf(in_put),
na.locf=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
na_locf_xts=na_locf_xts(in_put),
na_locf=na_locf(in_put),
na.locf=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
na_locf_xts=na_locf_xts(in_put),
na_locf=na_locf(in_put),
na.locf=na.locf(in_put),
times=10))[, c(1, 4, 5)]
NCOL(in_put)
in_put
in_put <- xts(in_put, order.by=seq.Date(from=Sys.Date(), by=1, length.out=NROW(in_put)))
in_put
summary(microbenchmark::microbenchmark(
na_locf_xts=na_locf_xts(in_put),
na_locf=na_locf(in_put),
na.locf=na.locf(in_put),
times=10))[, c(1, 4, 5)]
summary(microbenchmark::microbenchmark(
na_locf_xts=na_locf_xts(in_put),
na_locf=na_locf(in_put),
na.locf=na.locf(in_put),
times=10))[, c(1, 4, 5)]
na_locf_xts(in_put)
na_locf_xts(coredata(in_put))
na_locf_xts(as.vector(in_put))
in_put <- sample(44)
in_put[sample(NROW(in_put), 8)] <- NA
in_put <- matrix(in_put, nc=2)
in_put <- xts(in_put, order.by=seq.Date(from=Sys.Date(), by=1, length.out=NROW(in_put)))
na_locf(in_put)
xts:::na.locf.xts(in_put)
xts:::na.locf.xts(coredata(in_put))
na_locf_xts(in_put)
na_locf_xts(coredata(in_put))
na_locf_xts(as.vector(in_put))
library(HighFreq)
mid_prices <- 0.5 * (ta_q[, "Bid.Price"] + ta_q[, "Ask.Price"])
mid_prices <- 0.5 * (SPY_TAQ[, "Bid.Price"] + SPY_TAQ[, "Ask.Price"])
foo <- price_jumps(mid_prices, win_dow=31, vol_mult=1.0)
which_jumps <- function(x_ts, win_dow=51, vol_mult=2) {
# calculate simple returns
re_turns <- rutils::diff_it(as.vector(x_ts))
#  re_turns[1] <- 0
#  colnames(re_turns) <- "diffs"
rets_advanced <- rutils::lag_it(re_turns, -1)
#  rets_advanced[NROW(rets_advanced)] <- 0
#  colnames(rets_advanced) <- "rets_advanced"
# calculate volatility as the rolling quantile of returns
quan_tile <- caTools::runquantile(x=abs(re_turns), k=win_dow,
probs=0.9, endrule="constant", align="center")
#  quan_tile <- xts(quan_tile, order.by=index(re_turns))
#  colnames(quan_tile) <- "volat"
# carry forward non-zero quan_tile values
quan_tile[quan_tile==0] <- NA
quan_tile[1] <- 1
quan_tile <- rutils::na_locf(quan_tile)
#  quan_tile <- rutils::na_locf(quan_tile, fromLast=TRUE)
# value is suspect if abs re_turns greater than quan_tile,
# and if abs sum of re_turns less than quan_tile
sus_pect <- ((abs(re_turns) > vol_mult*quan_tile) &
(abs(rets_advanced) > vol_mult*quan_tile) &
(abs(re_turns+rets_advanced) < 2*vol_mult*quan_tile))
sus_pect[1] <- FALSE
#  colnames(sus_pect) <- "suspect"
# cat("Parsing", deparse(substitute(ta_q)), "\n")
# cat("Parsing", strsplit(deparse(substitute(ta_q)), split="[.]")[[1]][4], "on date:", format(to_day), "\tfound", sum(sus_pect), "suspect prices\n")
cat("date:", format(as.Date(index(first(x_ts)))), "\tfound", sum(sus_pect), "jump prices\n")
sus_pect
}  # end which_jumps
bar <- which_jumps(mid_prices, win_dow=31, vol_mult=1.0)
class(foo)
class(bar)
head(foo)
head(bar)
foobar <- as.logical(foo)
head(foo)
foobar <- as.logical(as.vector(foo))
head(foo)
foobar <- as.logical(as.numeric(foo))
head(foo)
foobar <- as.logical(foo)
head(foobar)
identical(foobar, bar)
library(microbenchmark)
summary(microbenchmark::microbenchmark(
price_jumps=price_jumps(mid_prices, win_dow=31, vol_mult=1.0),
which_jumps=which_jumps(mid_prices, win_dow=31, vol_mult=1.0),
times=10))[, c(1, 4, 5)]
scrub_taq <- function(ta_q, win_dow=51, vol_mult=2, tzone="America/New_York") {
# convert timezone of index to New_York
index(ta_q) <- lubridate::with_tz(time=index(ta_q), tzone=tzone)
# subset data to NYSE trading hours
ta_q <- ta_q['T09:30:00/T16:00:00', ]
# return NULL if no data
if (NROW(ta_q)==0)  return(NULL)
#  to_day <- as.Date(index(first(ta_q)))
# remove duplicate time stamps using duplicated()
ta_q <- ta_q[!duplicated(index(ta_q)), ]
# scrub quotes with suspect bid-offer spreads
bid_offer <- ta_q[, "Ask.Price"] - ta_q[, "Bid.Price"]
#  bid_offer <- na.omit(bid_offer)
sus_pect <- extreme_values(bid_offer, win_dow=win_dow, vol_mult=vol_mult)
# remove suspect values
ta_q <- ta_q[!sus_pect]
# replace suspect values
# ta_q[sus_pect, "Bid.Price"] <- ta_q[sus_pect, "Trade.Price"]
# ta_q[sus_pect, "Ask.Price"] <- ta_q[sus_pect, "Trade.Price"]
# scrub quotes with suspect price jumps
# calculate mid prices
mid_prices <- 0.5 * (ta_q[, "Bid.Price"] + ta_q[, "Ask.Price"])
#  mid_prices <- na.omit(mid_prices)
#  colnames(mid_prices) <- "Mid.Price"
# replace NA volumes with zero
ta_q[is.na(ta_q[, "Volume"]), "Volume"] <- 0
# replace whole rows containing suspect price jumps with NA, and perform locf()
ta_q[which_jumps(mid_prices, win_dow=win_dow, vol_mult=vol_mult)] <- NA
rutils::na_locf(ta_q)
}  # end scrub_taq
ta_q <- HighFreq::scrub_taq(ta_q=SPY_TAQ, win_dow=11, vol_mult=1)
ta_q <- scrub_taq(ta_q=SPY_TAQ, win_dow=11, vol_mult=1)
ta_q <- HighFreq::random_taq()
ta_q <- HighFreq::scrub_taq(ta_q=ta_q)
ta_q <- scrub_taq(ta_q=ta_q)
ta_q <- HighFreq::scrub_taq(ta_q=ta_q, win_dow=11, vol_mult=1)
ta_q <- scrub_taq(ta_q=ta_q, win_dow=11, vol_mult=1)
ta_q <- HighFreq::scrub_taq(ta_q=ta_q, win_dow=11, vol_mult=0.5)
ta_q <- scrub_taq(ta_q=ta_q, win_dow=11, vol_mult=0.5)
win_dow <- 11
vol_mult <- 0.5
foo <- ta_q
index(ta_q) <- lubridate::with_tz(time=index(ta_q), tzone=tzone)
ta_q <- ta_q['T09:30:00/T16:00:00', ]
tzone
tzone <- "America/New_York"
ta_q <- foo
index(ta_q) <- lubridate::with_tz(time=index(ta_q), tzone=tzone)
ta_q <- ta_q['T09:30:00/T16:00:00', ]
NROW(ta_q)
bar <- !duplicated(index(ta_q))
sum(bar)
bar <- duplicated(index(ta_q))
sum(bar)
ta_q <- ta_q[!duplicated(index(ta_q)), ]
bid_offer <- ta_q[, "Ask.Price"] - ta_q[, "Bid.Price"]
sus_pect <- extreme_values(bid_offer, win_dow=win_dow, vol_mult=vol_mult)
sum(sus_pect)
ta_q <- ta_q[!sus_pect]
mid_prices <- 0.5 * (ta_q[, "Bid.Price"] + ta_q[, "Ask.Price"])
ta_q[is.na(ta_q[, "Volume"]), "Volume"] <- 0
bar <- which_jumps(mid_prices, win_dow=win_dow, vol_mult=vol_mult)
ta_q[which_jumps(mid_prices, win_dow=win_dow, vol_mult=vol_mult)] <- NA
bar <- rutils::na_locf(ta_q)
head(bar)
HighFreq::scrub_taq
dim(foo)
head(foo)
ta_q <- foo
index(ta_q) <- lubridate::with_tz(time=index(ta_q), tzone=tzone)
ta_q <- ta_q['T09:30:00/T16:00:00', ]
ta_q <- ta_q[!duplicated(index(ta_q)), ]
bid_offer <- ta_q[, "Ask.Price"] - ta_q[, "Bid.Price"]
sus_pect <- extreme_values(bid_offer, win_dow=win_dow, vol_mult=vol_mult)
ta_q <- ta_q[!sus_pect]
mid_prices <- 0.5 * (ta_q[, "Bid.Price"] + ta_q[, "Ask.Price"])
ta_q[is.na(ta_q[, "Volume"]), "Volume"] <- 0
ta_q[price_jumps(mid_prices, win_dow=win_dow, vol_mult=vol_mult), ] <- NA
barr <- zoo::na.locf(ta_q)
identical(bar, barr)
head(barr)
head(bar)
tail(barr)
tail(bar)
class(barr)
class(bar)
all.equal(bar, barr)
barrr <- bar - barr
tail(barrr)
sum(barrr)
max(barrr)
ta_q <- HighFreq::scrub_taq(ta_q=SPY_TAQ, win_dow=11, vol_mult=1)
ta_q <- HighFreq::scrub_taq(ta_q=foo, win_dow=11, vol_mult=0.5)
ta_q <- scrub_taq(ta_q=foo, win_dow=11, vol_mult=0.5)
bar <- HighFreq::scrub_taq(ta_q=foo, win_dow=11, vol_mult=0.5)
barr <- scrub_taq(ta_q=foo, win_dow=11, vol_mult=0.5)
barrr <- bar - barr
max(barrr)
sapply(barrr, max)
which.max(barrr[, "Volume"])
barrr[4605:4610]
bar[4605:4610]
barr[4605:4610]
ta_q <- foo
index(ta_q) <- lubridate::with_tz(time=index(ta_q), tzone=tzone)
ta_q <- ta_q["T09:30:00/T16:00:00", ]
if (NROW(ta_q)==0)  return(NULL)
ta_q <- ta_q[!duplicated(index(ta_q)), ]
bid_offer <- ta_q[, "Ask.Price"] - ta_q[, "Bid.Price"]
sus_pect <- extreme_values(bid_offer, win_dow=win_dow, vol_mult=vol_mult)
ta_q <- ta_q[!sus_pect]
mid_prices <- 0.5 * (ta_q[, "Bid.Price"] + ta_q[, "Ask.Price"])
ta_q[is.na(ta_q[, "Volume"]), "Volume"] <- 0
ta_q[which_jumps(mid_prices, win_dow=win_dow, vol_mult=vol_mult), ] <- NA
barr <- rutils::na_locf(ta_q)
barr[4605:4610]
bar[4605:4610]
all.equal(bar, barr)
identical(bar, barr)
library(HighFreq)
oh_lc <- SPY["2009-03"]
foo <- rutils::diff_it(as.vector(xts::.index(oh_lc)))
bar <- which(foo > 60)
foo <- numeric(NROW(oh_lc))
foo[bar] <- as.vector(oh_lc[bar, 1]) - as.vector(oh_lc[bar-1, 4])
foo <- cumsum(foo)
oh_lc[, 1:4] <- coredata(oh_lc[, 1:4]) - cbind(foo, foo, foo, foo)
hurst_rolling <- roll_hurst(oh_lc=oh_lc, win_dow=win_dow)
x11()
chart_Series(hurst_rolling["2009-03-10/2009-03-12"], name=paste("SPY", "hurst_rolling"))
mode(1:11)
typeof(1:11)
win_dow
win_dow <- 59
hurst_rolling <- roll_hurst(oh_lc=SPY, win_dow=win_dow)
colnames(hurst_seasonal) <- paste0(colnames(hurst_rolling), ".seasonal")
hurst_seasonal <- season_ality(hurst_rolling)
colnames(hurst_seasonal) <- paste0(colnames(hurst_rolling), ".seasonal")
chart_Series(x=hurst_seasonal, name=paste(colnames(hurst_seasonal), "intraday seasonality"))
foo <- rutils::diff_it(as.vector(xts::.index(SPY)))
remove_jumps <- function(oh_lc) {
# find time index of the periods greater than 60 seconds
peri_ods <- rutils::diff_it(as.vector(xts::.index(oh_lc)))
which_periods <- which(peri_ods > 60)
# calculate cumulative sum of overnight price jumps
jump_s <- numeric(NROW(oh_lc))
jump_s[which_periods] <- as.vector(oh_lc[which_periods, 1]) - as.vector(oh_lc[which_periods-1, 4])
jump_s <- cumsum(jump_s)
# subtract overnight price jumps from OHLC
oh_lc[, 1:4] <- coredata(oh_lc[, 1:4]) - cbind(jump_s, jump_s, jump_s, jump_s)
oh_lc
}  # end remove_jumps
oh_lc <- remove_jumps(SPY)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
remove_jumps <- function(oh_lc) {
# find time index of the periods greater than 60 seconds
peri_ods <- rutils::diff_it(as.vector(xts::.index(oh_lc)))
which_periods <- which(peri_ods > 60)
# calculate cumulative sum of overnight price jumps
jump_s <- numeric(NROW(oh_lc))
jump_s[which_periods] <- as.vector(oh_lc[which_periods, 1]) - as.vector(oh_lc[which_periods-1, 4])
jump_s <- cumsum(jump_s)
# subtract overnight price jumps from OHLC
oh_lc[, 1:4] <- coredata(oh_lc[, 1:4]) - cbind(jump_s, jump_s, jump_s, jump_s)
oh_lc
}  # end remove_jumps
foo <- remove_jumps(SPY["2012-03"])
bar <- matrix(1:12, nc=3)
bar
bar - 1:4
remove_jumps <- function(oh_lc) {
# find time index of the periods greater than 60 seconds
peri_ods <- rutils::diff_it(as.vector(xts::.index(oh_lc)))
which_periods <- which(peri_ods > 60)
# calculate cumulative sum of overnight price jumps
jump_s <- numeric(NROW(oh_lc))
jump_s[which_periods] <- as.vector(oh_lc[which_periods, 1]) - as.vector(oh_lc[which_periods-1, 4])
jump_s <- cumsum(jump_s)
# subtract overnight price jumps from OHLC
oh_lc[, 1:4] <- coredata(oh_lc[, 1:4]) - jump_s
oh_lc
}  # end remove_jumps
bar <- remove_jumps(SPY["2012-03"])
identical(foo, bar)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
oh_lc <- remove_jumps(SPY["2009-03"])
hurst_rolling <- roll_hurst(oh_lc=oh_lc, win_dow=win_dow)
x11()
chart_Series(hurst_rolling["2009-03-10/2009-03-12"], name=paste("SPY", "hurst_rolling"))
win_dow
win_dow <- 31
sharpe_rolling <- roll_sharpe(oh_lc=SPY["2009-03"], win_dow=win_dow)
sharpe_seasonal <- season_ality(sharpe_rolling)
chart_Series(sharpe_seasonal, name=paste("SPY", "sharpe_seasonal"))
sharpe_rolling <- roll_sharpe(oh_lc=SPY["2009"], win_dow=win_dow)
sharpe_seasonal <- season_ality(sharpe_rolling)
chart_Series(sharpe_seasonal, name=paste("SPY", "sharpe_seasonal"))
sharpe_rolling <- roll_sharpe(oh_lc=SPY["2010/"], win_dow=win_dow)
sharpe_seasonal <- season_ality(sharpe_rolling)
chart_Series(sharpe_seasonal, name=paste("SPY", "sharpe_seasonal"))
sharpe_rolling <- roll_sharpe(oh_lc=SPY["2008/2009"], win_dow=win_dow)
sharpe_seasonal <- season_ality(sharpe_rolling)
chart_Series(sharpe_seasonal, name=paste("SPY", "sharpe_seasonal"))
ls()
dim(hurst_rolling)
oh_lc <- remove_jumps(SPY["2009"])
hurst_rolling <- roll_hurst(oh_lc=SPY["2009"], win_dow=win_dow)
chart_Series(hurst_rolling["2009-03-10/2009-03-12"], name=paste("SPY", "hurst_rolling"))
hurst_seasonal <- season_ality(hurst_rolling)
colnames(hurst_seasonal) <- paste0(colnames(hurst_rolling), ".seasonal")
chart_Series(hurst_seasonal, name=paste("SPY", "hurst_seasonal"))
hurst_rolling <- roll_hurst(oh_lc=oh_lc, win_dow=win_dow)
hurst_seasonal <- season_ality(hurst_rolling)
colnames(hurst_seasonal) <- paste0(colnames(hurst_rolling), ".seasonal")
chart_Series(hurst_seasonal, name=paste("SPY", "hurst_seasonal"))
oh_lc <- remove_jumps(SPY["2008/2009"])
hurst_rolling <- roll_hurst(oh_lc=oh_lc, win_dow=win_dow)
hurst_seasonal <- season_ality(hurst_rolling)
colnames(hurst_seasonal) <- paste0(colnames(hurst_rolling), ".seasonal")
chart_Series(hurst_seasonal, name=paste("SPY", "hurst_seasonal"))
oh_lc <- remove_jumps(SPY["2010/"])
hurst_rolling <- roll_hurst(oh_lc=oh_lc, win_dow=win_dow)
hurst_seasonal <- season_ality(hurst_rolling)
colnames(hurst_seasonal) <- paste0(colnames(hurst_rolling), ".seasonal")
chart_Series(hurst_seasonal, name=paste("SPY", "hurst_seasonal"))
