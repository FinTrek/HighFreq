{
  "name": "Highfreq",
  "tagline": "R package for high frequency time series data management",
  "body": "## HighFreq package for high frequency time series data management\r\n\r\n========\r\n\r\nThe **HighFreq** package contains functions for:  \r\n* chaining and joining time series, \r\n* scrubbing bad data from time series, \r\n* managing time zones and alligning time indices, \r\n* converting TAQ data to OHLC format, \r\n* aggregating data to lower frequency (periodicity), \r\n* calculating rolling aggregations (sum, VWAP, etc.), \r\n* calculating seasonality aggregations, \r\n* calculating moments (variance, skew, etc.), \r\n* calculating functionals (Hurst exponent, etc.), \r\n\r\n========\r\n\r\n### Installation and loading  \r\n\r\nInstalling **HighFreq** package from github:  \r\n```\r\ninstall.packages(\"devtools\")\r\nlibrary(devtools)\r\ninstall_github(repo=\"algoquant/HighFreq\")\r\nlibrary(HighFreq)\r\n```\r\n\r\n========\r\n\r\n### Data  \r\n\r\nThe **HighFreq** package contains an intraday $xts$ time series data set called \"SPY\", with 1-minute $OHLC$ bar data for the SPY etf.  It also contains a string variable called \"sym_bol\" with the name \"SPY\".  The data is set up for lazy load.  \r\nThe data source is the \r\n[Wharton Research Data Service](https://wrds-web.wharton.upenn.edu/wrds/)  \r\n\r\n========\r\n\r\n### Examples  \r\n\r\nCalculate daily trading volume:  \r\n```\r\ndaily_volume <- apply.daily(x=get(sym_bol)[, 5], FUN=sum)\r\ncolnames(daily_volume) <- paste0(na_me(get(sym_bol)), \".Volume\")\r\n```\r\n\r\nCalculate daily variance:  \r\n```\r\ndaily_var <- apply.daily(x=get(sym_bol), FUN=agg_regate, esti_mator=\"vari_ance\")\r\ncolnames(daily_var) <- paste0(na_me(get(sym_bol)), \".Var\")\r\n```\r\n\r\nCalculate daily skew:  \r\n```\r\ndaily_skew <- apply.daily(x=get(sym_bol), FUN=agg_regate, esti_mator=\"skew_ohlc\")\r\ndaily_skew <- daily_skew/(daily_var)^(1.5)\r\ncolnames(daily_skew) <- paste0(na_me(get(sym_bol)), \".Skew\")\r\n```\r\n\r\nCalculate daily Hurst:  \r\n```\r\ndaily_hurst <- apply.daily(x=get(sym_bol), FUN=agg_regate, esti_mator=\"hurst_ohlc\")\r\ncolnames(daily_hurst) <- paste0(na_me(get(sym_bol)), \".Hurst\")\r\nchart_Series(daily_hurst, name=paste(sym_bol, \"Hurst\"))\r\n```\r\n\r\nCalculate rolling prices:  \r\n```\r\nroll_prices <- roll_sum(get(sym_bol)[, 1], win_dow=10)/10\r\ncolnames(roll_prices) <- paste0(sym_bol, \".Rets\")\r\nchart_Series(get(sym_bol)[\"2013-11-12\", ], name=paste(sym_bol, \"Prices\"))\r\nadd_TA(roll_prices[\"2013-11-12\"], on=1, col=\"red\", lwd=2)\r\n```\r\n\r\nCalculate rolling volume-weighted variance:  \r\n```\r\nroll_var <- roll_agg(ohlc=get(sym_bol), n=10)\r\n# plot without overnight jump\r\nchart_Series(roll_var[\"2013-11-12\", ][-(1:11)], name=paste(sym_bol, \"rolling volume-weighted variance\"))\r\n```\r\n\r\nCalculate daily seasonality of Hurst exponent:  \r\n```\r\nseason_hurst <- season_ality(hurst_ohlc(ohlc=get(sym_bol)))\r\ncolnames(season_hurst) <- paste0(na_me(get(sym_bol)), \".season_hurst\")\r\nseason_hurst <- season_hurst[-(NROW(season_hurst))]\r\nchart_Series(x=season_hurst, \r\n             name=paste(colnames(season_hurst), \"daily seasonality\"))\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}