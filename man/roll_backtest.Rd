% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HighFreq.R
\name{roll_backtest}
\alias{roll_backtest}
\title{Perform a backtest simulation of a trading strategy (model) over a vector of
end points along a time series of prices.}
\usage{
roll_backtest(x_ts, train_func, trade_func, look_back = look_forward,
  look_forward, end_points = rutils::calc_endpoints(x_ts, look_forward), ...)
}
\arguments{
\item{x_ts}{a time series of prices, asset returns, trading volumes, and
other data, in \emph{xts} format.}

\item{train_func}{the name of the function for training (calibrating) a
forecasting model, to be applied over a rolling look-back window.}

\item{trade_func}{the name of the trading model function, to be applied over
a rolling look-forward window.}

\item{look_back}{the size of the look-back window, equal to the number of
rows of data used for training the forecasting model.}

\item{look_forward}{the size of the look-forward window, equal to the number
of rows of data used for trading the strategy.}

\item{end_points}{a vector of end points along the rows of the \code{x_ts}
time series, given as either integers or dates.}

\item{...}{additional parameters to the functions \code{train_func()} and
\code{trade_func()}.}
}
\value{
An \emph{xts} time series with the number of rows equal to the number
  of end points minus two.
}
\description{
Perform a backtest simulation of a trading strategy (model) over a vector of
end points along a time series of prices.
}
\details{
The function \code{roll_backtest()} performs a rolling backtest
  simulation of a trading strategy over a vector of end points. At each end
  point, it trains (calibrates) a forecasting model using past data taken
  from the \code{x_ts} time series over the look-back window, and applies the
  forecasts to the \code{trade_func()} trading model, using out-of-sample
  future data from the look-forward window.
  The function \code{trade_func()} should simulate the trading model and
  should return a named vector of performance statistics.

  The function \code{roll_backtest()} returns an \emph{xts} time series with
  columns of performance statistics returned by \code{trade_func()}, and with
  the number of rows equal to the number of end points minus two (because the
  first and last end points can't be included in the backtest).
}
\examples{
# combine two time series of prices
price_s <- cbind(rutils::env_etf$XLU, rutils::env_etf$XLP)
look_back <- 252
look_forward <- 22
# define end points
end_points <- rutils::calc_endpoints(price_s, look_forward)
# perform back-test
back_test <- roll_backtest(end_points=end_points,
    look_forward=look_forward,
    look_back=look_back,
    train_func = train_model,
    trade_func = trade_model,
    model_params = model_params,
    trading_params = trading_params,
    x_ts=price_s)
}

