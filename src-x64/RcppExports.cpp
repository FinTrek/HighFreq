// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
CharacterVector rcpp_hello_world();
RcppExport SEXP _HighFreq_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mult
double rcpp_mult(double x, double y);
RcppExport SEXP _HighFreq_rcpp_mult(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mult(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mult_vec
NumericVector rcpp_mult_vec(NumericVector x, NumericVector y);
RcppExport SEXP _HighFreq_rcpp_mult_vec(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mult_vec(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_ou_proc
NumericVector rcpp_ou_proc(int len_gth, double eq_price, double vol_at, double the_ta, NumericVector r_norm);
RcppExport SEXP _HighFreq_rcpp_ou_proc(SEXP len_gthSEXP, SEXP eq_priceSEXP, SEXP vol_atSEXP, SEXP the_taSEXP, SEXP r_normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len_gth(len_gthSEXP);
    Rcpp::traits::input_parameter< double >::type eq_price(eq_priceSEXP);
    Rcpp::traits::input_parameter< double >::type vol_at(vol_atSEXP);
    Rcpp::traits::input_parameter< double >::type the_ta(the_taSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_norm(r_normSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_ou_proc(len_gth, eq_price, vol_at, the_ta, r_norm));
    return rcpp_result_gen;
END_RCPP
}
// roll_sum
NumericVector roll_sum(NumericVector re_turns, int look_back);
RcppExport SEXP _HighFreq_roll_sum(SEXP re_turnsSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type re_turns(re_turnsSEXP);
    Rcpp::traits::input_parameter< int >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_sum(re_turns, look_back));
    return rcpp_result_gen;
END_RCPP
}
// roll_var
NumericVector roll_var(NumericVector re_turns, int look_back);
RcppExport SEXP _HighFreq_roll_var(SEXP re_turnsSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type re_turns(re_turnsSEXP);
    Rcpp::traits::input_parameter< int >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var(re_turns, look_back));
    return rcpp_result_gen;
END_RCPP
}
// roll_wsum
NumericVector roll_wsum(NumericVector re_turns, NumericVector wei_ghts);
RcppExport SEXP _HighFreq_roll_wsum(SEXP re_turnsSEXP, SEXP wei_ghtsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type re_turns(re_turnsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wei_ghts(wei_ghtsSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_wsum(re_turns, wei_ghts));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HighFreq_rcpp_hello_world", (DL_FUNC) &_HighFreq_rcpp_hello_world, 0},
    {"_HighFreq_rcpp_mult", (DL_FUNC) &_HighFreq_rcpp_mult, 2},
    {"_HighFreq_rcpp_mult_vec", (DL_FUNC) &_HighFreq_rcpp_mult_vec, 2},
    {"_HighFreq_rcpp_ou_proc", (DL_FUNC) &_HighFreq_rcpp_ou_proc, 5},
    {"_HighFreq_roll_sum", (DL_FUNC) &_HighFreq_roll_sum, 2},
    {"_HighFreq_roll_var", (DL_FUNC) &_HighFreq_roll_var, 2},
    {"_HighFreq_roll_wsum", (DL_FUNC) &_HighFreq_roll_wsum, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_HighFreq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
